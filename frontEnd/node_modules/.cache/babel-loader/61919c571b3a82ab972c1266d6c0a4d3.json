{"ast":null,"code":"var _jsxFileName = \"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nimport { toast } from 'react-toastify';\nimport { any } from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst algosdk = require('algosdk');\n\nconst crypto = require('crypto');\n\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort = \"\";\nlet AlgoSigner;\nlet account;\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\nvar check = algodClient.healthCheck().do();\n\nif (check) {\n  console.log(\"client connected\");\n}\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n}));\n\nfunction hashPassPhrase(passPhrase) {\n  const hash = crypto.createHash('sha256');\n  hash.update(passPhrase);\n  return hash.digest('hex');\n} // helper function to await transaction confirmation\n// Function used to wait for a tx confirmation\n\n\nconst waitForConfirmation = async function (algodclient, txId) {\n  let status = await algodclient.status().do();\n  let lastRound = status[\"last-round\"];\n\n  while (true) {\n    const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n    if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n      //Got the completed Transaction\n      console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n      break;\n    }\n\n    lastRound++;\n    await algodclient.statusAfterBlock(lastRound).do();\n  }\n};\n\nasync function getTestNetPrimaryAccount() {\n  await window.AlgoSigner.accounts({\n    ledger: 'TestNet'\n  }).then(d => {\n    if (d && d.length > 0) {\n      console.log(`Account found: ${JSON.stringify(d[0])}`);\n      account = d[0];\n    } else {\n      throw 'Primary test account not found in AlgoSigner.';\n    }\n  }).catch(e => {\n    console.log(JSON.stringify(e), 'bad');\n  });\n} // call application \n\n\nasync function callApp(client, index, appArgs) {\n  // define sender\n  try {\n    if (typeof window.AlgoSigner !== 'undefined') {\n      console.log(\"algosigner installed\");\n    } else {\n      console.log(\"algosigner not installed\");\n    }\n\n    window.AlgoSigner.connect().then(d => {\n      console.log(\"Connect\");\n    }).catch(e => {\n      console.error(e);\n    });\n    getTestNetPrimaryAccount(); // get node suggested parameters\n\n    let params = await client.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true; // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n    //let state= await client.accountInformation(account.addr).do()\n    //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n\n    let txn = algosdk.makeApplicationNoOpTxn(account.address, params, index, appArgs);\n    let txId = txn.txID().toString();\n    let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n    let signedTxs = await window.AlgoSigner.signTxn([{\n      txn: base64Tx\n    }]); // Get the base64 encoded signed transaction and convert it to binary\n\n    let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); // Sign the transaction\n\n    console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n    await client.sendRawTransaction(signedTxn).do(); // Wait for confirmation\n\n    await waitForConfirmation(client, txId); // display results\n\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    console.log(\"Called app-id:\", transactionResponse['txn']['txn']['apid']);\n\n    if (transactionResponse['global-state-delta'] !== undefined) {\n      console.log(\"Global State updated:\", transactionResponse['global-state-delta']);\n    }\n\n    if (transactionResponse['local-state-delta'] !== undefined) {\n      console.log(\"Local State updated:\", transactionResponse['local-state-delta']);\n    }\n  } catch (error) {\n    console.log(`Failed: AddCar - ${error}`);\n    return 0;\n  }\n}\n\nasync function optIn() {\n  try {\n    // get suggested parameters\n    const params = await algodClient.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true;\n    const filePath = path.join(__dirname, 'samplearg.teal');\n    const data = fs.readFileSync(filePath);\n    const results = await algodClient.compile(data).do();\n    console.log(\"Hash = \" + results.hash);\n    console.log(\"Result = \" + results.result);\n    const program = new Uint8Array(Buffer.from(results.result, \"base64\")); // Use this if no args\n    // const lsig = algosdk.makeLogicSig(program);\n    // Initialize arguments array\n\n    const args = []; // String parameter\n    // args.push([...Buffer.from(\"my string\")]);\n    // Integer parameter\n\n    args.push(algosdk.encodeUint64(123));\n    const lsig = algosdk.makeLogicSig(program, args);\n    console.log(\"lsig : \" + lsig.address()); // create a transaction\n\n    const sender = lsig.address();\n    const receiver = \"<receiver-address>\";\n    const amount = 10000;\n    const closeToRemaninder = undefined;\n    const note = undefined;\n    const txn = algosdk.makePaymentTxnWithSuggestedParams(sender, receiver, amount, closeToRemaninder, note, params);\n    const rawSignedTxn = algosdk.signLogicSigTransactionObject(txn, lsig); // send raw LogicSigTransaction to network\n\n    const tx = await algodClient.sendRawTransaction(rawSignedTxn.blob).do();\n    console.log(\"Transaction : \" + tx.txId);\n    await waitForConfirmation(algodClient, tx.txId);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport default function AddCar() {\n  _s();\n\n  const classes = useStyles(); //States\n\n  const [carID, setCarID] = React.useState('');\n  const [carMake, setCarMake] = React.useState('');\n  const [carModel, setCarModel] = React.useState('');\n  const [carColor, setCarColor] = React.useState('');\n  const [carOwner, setCarOwner] = React.useState(''); //Handlers\n\n  const handleCarID = event => {\n    setCarID(event.target.value);\n  };\n\n  const handleCarModel = event => {\n    setCarModel(event.target.value);\n  };\n\n  const handleCarMake = event => {\n    setCarMake(event.target.value);\n  };\n\n  const handleCarColor = event => {\n    setCarColor(event.target.value);\n  };\n\n  const handleCarOwner = event => {\n    setCarOwner(event.target.value);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      let appArgs = [];\n      appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n      appArgs.push(new Uint8Array(Buffer.from(carID)));\n      appArgs.push(new Uint8Array(Buffer.from(carMake)));\n      appArgs.push(new Uint8Array(Buffer.from(carModel)));\n      appArgs.push(new Uint8Array(Buffer.from(carColor)));\n      let createCarEvent = await callApp(algodClient, 23658482, appArgs);\n    } catch (error) {\n      console.error(`Failed to evaluate transaction: ${error}`);\n    }\n  };\n\n  const allData = () => {\n    return {\n      'carID': carID,\n      'carColor': carColor,\n      'carModel': carModel,\n      'carOwner': carOwner,\n      'carMake': carMake\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"CarID\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Make\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarMake\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Model\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Color\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Owner\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarOwner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddCar, \"xL8NJdaWjDKG6C+qI1K7SwqQlQM=\", false, function () {\n  return [useStyles];\n});\n\n_c = AddCar;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCar\");","map":{"version":3,"sources":["/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCar.js"],"names":["React","makeStyles","InputAdornment","TextField","Button","toast","any","algosdk","require","crypto","algodAddress","algodToken","algodPort","AlgoSigner","account","algodClient","Algodv2","fs","path","indexer_token","indexer_server","indexer_port","indexerClient","Indexer","check","healthCheck","do","console","log","useStyles","theme","margin","spacing","hashPassPhrase","passPhrase","hash","createHash","update","digest","waitForConfirmation","algodclient","txId","status","lastRound","pendingInfo","pendingTransactionInformation","statusAfterBlock","getTestNetPrimaryAccount","window","accounts","ledger","then","d","length","JSON","stringify","catch","e","callApp","client","index","appArgs","connect","error","params","getTransactionParams","fee","flatFee","txn","makeApplicationNoOpTxn","address","txID","toString","base64Tx","encoding","msgpackToBase64","toByte","signedTxs","signTxn","signedTxn","base64ToMsgpack","blob","sendRawTransaction","transactionResponse","undefined","optIn","filePath","join","__dirname","data","readFileSync","results","compile","result","program","Uint8Array","Buffer","from","args","push","encodeUint64","lsig","makeLogicSig","sender","receiver","amount","closeToRemaninder","note","makePaymentTxnWithSuggestedParams","rawSignedTxn","signLogicSigTransactionObject","tx","AddCar","classes","carID","setCarID","useState","carMake","setCarMake","carModel","setCarModel","carColor","setCarColor","carOwner","setCarOwner","handleCarID","event","target","value","handleCarModel","handleCarMake","handleCarColor","handleCarOwner","handleSubmit","createCarEvent","allData","startAdornment"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAAQC,KAAR,QAAoB,gBAApB;AACA,SAASC,GAAT,QAAoB,YAApB;;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,YAAY,GAAG,qCAArB;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,SAAS,GAAE,EAAjB;AACA,IAAIC,UAAJ;AACA,IAAIC,OAAJ;AACA,IAAIC,WAAW,GAAG,IAAIR,OAAO,CAACS,OAAZ,CAAoBL,UAApB,EAAgCD,YAAhC,EAA8CE,SAA9C,CAAlB;;AACA,MAAMK,EAAE,GAAGT,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMU,IAAI,GAAGV,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMW,aAAa,GAAG,EAAtB;AACA,MAAMC,cAAc,GAAG,0CAAvB;AACA,MAAMC,YAAY,GAAG,CAArB;AAEA,IAAIC,aAAa,GAAG,IAAIf,OAAO,CAACgB,OAAZ,CAAoBJ,aAApB,EAAmCC,cAAnC,EAAmDC,YAAnD,CAApB;AAEA,IAAIG,KAAK,GAAET,WAAW,CAACU,WAAZ,GAA0BC,EAA1B,EAAX;;AACA,IAAIF,KAAJ,EAAU;AACNG,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH;;AAED,MAAMC,SAAS,GAAG5B,UAAU,CAAE6B,KAAD,KAAY;AACrCC,EAAAA,MAAM,EAAE;AACJA,IAAAA,MAAM,EAAED,KAAK,CAACE,OAAN,CAAc,CAAd;AADJ;AAD6B,CAAZ,CAAD,CAA5B;;AAMA,SAASC,cAAT,CAAwBC,UAAxB,EAAoC;AAChC,QAAMC,IAAI,GAAG1B,MAAM,CAAC2B,UAAP,CAAkB,QAAlB,CAAb;AACAD,EAAAA,IAAI,CAACE,MAAL,CAAYH,UAAZ;AACA,SAAOC,IAAI,CAACG,MAAL,CAAY,KAAZ,CAAP;AACH,C,CAED;AACA;;;AACA,MAAMC,mBAAmB,GAAG,gBAAgBC,WAAhB,EAA6BC,IAA7B,EAAmC;AAC3D,MAAIC,MAAM,GAAI,MAAMF,WAAW,CAACE,MAAZ,GAAqBhB,EAArB,EAApB;AACA,MAAIiB,SAAS,GAAGD,MAAM,CAAC,YAAD,CAAtB;;AACE,SAAO,IAAP,EAAa;AACX,UAAME,WAAW,GAAG,MAAMJ,WAAW,CAACK,6BAAZ,CAA0CJ,IAA1C,EAAgDf,EAAhD,EAA1B;;AACA,QAAIkB,WAAW,CAAC,iBAAD,CAAX,KAAmC,IAAnC,IAA2CA,WAAW,CAAC,iBAAD,CAAX,GAAiC,CAAhF,EAAmF;AACjF;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBa,IAAjB,GAAwB,sBAAxB,GAAiDG,WAAW,CAAC,iBAAD,CAAxE;AACA;AACD;;AACDD,IAAAA,SAAS;AACT,UAAMH,WAAW,CAACM,gBAAZ,CAA6BH,SAA7B,EAAwCjB,EAAxC,EAAN;AACD;AACF,CAbL;;AAeI,eAAeqB,wBAAf,GAAyC;AACrC,QAAMC,MAAM,CAACnC,UAAP,CAAkBoC,QAAlB,CAA2B;AAACC,IAAAA,MAAM,EAAE;AAAT,GAA3B,EACLC,IADK,CACCC,CAAD,IAAO;AACT,QAAGA,CAAC,IAAIA,CAAC,CAACC,MAAF,GAAW,CAAnB,EAAqB;AACjB1B,MAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiB0B,IAAI,CAACC,SAAL,CAAeH,CAAC,CAAC,CAAD,CAAhB,CAAqB,EAAnD;AACAtC,MAAAA,OAAO,GAAGsC,CAAC,CAAC,CAAD,CAAX;AACH,KAHD,MAII;AACA,YAAM,+CAAN;AACH;AACJ,GATK,EAULI,KAVK,CAUEC,CAAD,IAAO;AACV9B,IAAAA,OAAO,CAACC,GAAR,CAAY0B,IAAI,CAACC,SAAL,CAAeE,CAAf,CAAZ,EAA8B,KAA9B;AACH,GAZK,CAAN;AAaH,C,CACL;;;AACA,eAAeC,OAAf,CAAuBC,MAAvB,EAA+BC,KAA/B,EAAsCC,OAAtC,EAA+C;AAC3C;AACD,MAAG;AACF,QAAI,OAAOb,MAAM,CAACnC,UAAd,KAA6B,WAAjC,EAA8C;AAC1Cc,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,KAFH,MAES;AACLD,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;;AACDoB,IAAAA,MAAM,CAACnC,UAAP,CAAkBiD,OAAlB,GACCX,IADD,CACOC,CAAD,IAAO;AACXzB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,KAHD,EAIC4B,KAJD,CAIQC,CAAD,IAAO;AACZ9B,MAAAA,OAAO,CAACoC,KAAR,CAAcN,CAAd;AACD,KAND;AAOFV,IAAAA,wBAAwB,GAbtB,CAcF;;AACA,QAAIiB,MAAM,GAAG,MAAML,MAAM,CAACM,oBAAP,GAA8BvC,EAA9B,EAAnB,CAfE,CAgBF;;AACAsC,IAAAA,MAAM,CAACE,GAAP,GAAa,IAAb;AACAF,IAAAA,MAAM,CAACG,OAAP,GAAiB,IAAjB,CAlBE,CAoBF;AACA;AACA;;AACA,QAAIC,GAAG,GAAG7D,OAAO,CAAC8D,sBAAR,CAA+BvD,OAAO,CAACwD,OAAvC,EAAgDN,MAAhD,EAAwDJ,KAAxD,EAA+DC,OAA/D,CAAV;AACA,QAAIpB,IAAI,GAAG2B,GAAG,CAACG,IAAJ,GAAWC,QAAX,EAAX;AACA,QAAIC,QAAQ,GAAGzB,MAAM,CAACnC,UAAP,CAAkB6D,QAAlB,CAA2BC,eAA3B,CAA2CP,GAAG,CAACQ,MAAJ,EAA3C,CAAf;AAEA,QAAIC,SAAS,GAAG,MAAM7B,MAAM,CAACnC,UAAP,CAAkBiE,OAAlB,CAA0B,CAC/C;AACGV,MAAAA,GAAG,EAAEK;AADR,KAD+C,CAA1B,CAAtB,CA3BE,CAiCF;;AACD,QAAIM,SAAS,GAAG/B,MAAM,CAACnC,UAAP,CAAkB6D,QAAlB,CAA2BM,eAA3B,CAA2CH,SAAS,CAAC,CAAD,CAAT,CAAaI,IAAxD,CAAhB,CAlCG,CAmCF;;AACAtD,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDa,IAAhD,EApCE,CAsCF;;AACA,UAAMkB,MAAM,CAACuB,kBAAP,CAA0BH,SAA1B,EAAqCrD,EAArC,EAAN,CAvCE,CAyCF;;AACA,UAAMa,mBAAmB,CAACoB,MAAD,EAASlB,IAAT,CAAzB,CA1CE,CA4CF;;AACA,QAAI0C,mBAAmB,GAAG,MAAMxB,MAAM,CAACd,6BAAP,CAAqCJ,IAArC,EAA2Cf,EAA3C,EAAhC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BuD,mBAAmB,CAAC,KAAD,CAAnB,CAA2B,KAA3B,EAAkC,MAAlC,CAA7B;;AACA,QAAIA,mBAAmB,CAAC,oBAAD,CAAnB,KAA8CC,SAAlD,EAA8D;AAC1DzD,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAoCuD,mBAAmB,CAAC,oBAAD,CAAvD;AACH;;AACD,QAAIA,mBAAmB,CAAC,mBAAD,CAAnB,KAA6CC,SAAjD,EAA6D;AACzDzD,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmCuD,mBAAmB,CAAC,mBAAD,CAAtD;AACH;AACA,GArDF,CAqDE,OAAMpB,KAAN,EAAY;AACTpC,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBmC,KAAM,EAAtC;AACA,WAAO,CAAP;AACH;AACJ;;AAED,eAAesB,KAAf,GAAsB;AAClB,MAAG;AACE;AACL,UAAMrB,MAAM,GAAG,MAAMjD,WAAW,CAACkD,oBAAZ,GAAmCvC,EAAnC,EAArB,CAFG,CAGH;;AACAsC,IAAAA,MAAM,CAACE,GAAP,GAAa,IAAb;AACAF,IAAAA,MAAM,CAACG,OAAP,GAAiB,IAAjB;AAEA,UAAMmB,QAAQ,GAAGpE,IAAI,CAACqE,IAAL,CAAUC,SAAV,EAAqB,gBAArB,CAAjB;AAEA,UAAMC,IAAI,GAAGxE,EAAE,CAACyE,YAAH,CAAgBJ,QAAhB,CAAb;AACA,UAAOK,OAAO,GAAG,MAAM5E,WAAW,CAAC6E,OAAZ,CAAoBH,IAApB,EAA0B/D,EAA1B,EAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAY+D,OAAO,CAACxD,IAAhC;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAc+D,OAAO,CAACE,MAAlC;AAEA,UAAMC,OAAO,GAAG,IAAIC,UAAJ,CAAeC,MAAM,CAACC,IAAP,CAAYN,OAAO,CAACE,MAApB,EAA4B,QAA5B,CAAf,CAAhB,CAdG,CAeH;AACA;AAEA;;AACA,UAAMK,IAAI,GAAG,EAAb,CAnBG,CAqBH;AACA;AAEA;;AACAA,IAAAA,IAAI,CAACC,IAAL,CAAU5F,OAAO,CAAC6F,YAAR,CAAqB,GAArB,CAAV;AAGA,UAAMC,IAAI,GAAG9F,OAAO,CAAC+F,YAAR,CAAqBR,OAArB,EAA8BI,IAA9B,CAAb;AACAvE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYyE,IAAI,CAAC/B,OAAL,EAAxB,EA7BG,CA+BH;;AACA,UAAMiC,MAAM,GAAGF,IAAI,CAAC/B,OAAL,EAAf;AACA,UAAMkC,QAAQ,GAAG,oBAAjB;AACA,UAAMC,MAAM,GAAG,KAAf;AACA,UAAMC,iBAAiB,GAAGtB,SAA1B;AACA,UAAMuB,IAAI,GAAGvB,SAAb;AACA,UAAMhB,GAAG,GAAG7D,OAAO,CAACqG,iCAAR,CAA0CL,MAA1C,EAAkDC,QAAlD,EAA4DC,MAA5D,EAAoEC,iBAApE,EAAuFC,IAAvF,EAA6F3C,MAA7F,CAAZ;AAEA,UAAM6C,YAAY,GAAGtG,OAAO,CAACuG,6BAAR,CAAsC1C,GAAtC,EAA2CiC,IAA3C,CAArB,CAvCG,CAyCH;;AACA,UAAMU,EAAE,GAAG,MAAMhG,WAAW,CAACmE,kBAAZ,CAA+B2B,YAAY,CAAC5B,IAA5C,EAAkDvD,EAAlD,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBmF,EAAE,CAACtE,IAAlC;AACA,UAAMF,mBAAmB,CAACxB,WAAD,EAAcgG,EAAE,CAACtE,IAAjB,CAAzB;AACC,GA7CD,CA6CC,OAAMsB,KAAN,EAAY;AACTpC,IAAAA,OAAO,CAACC,GAAR,CAAYmC,KAAZ;AACH;AACJ;;AAID,eAAe,SAASiD,MAAT,GAAkB;AAAA;;AAC7B,QAAMC,OAAO,GAAGpF,SAAS,EAAzB,CAD6B,CAE7B;;AACA,QAAM,CAACqF,KAAD,EAAQC,QAAR,IAAoBnH,KAAK,CAACoH,QAAN,CAAe,EAAf,CAA1B;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBtH,KAAK,CAACoH,QAAN,CAAe,EAAf,CAA9B;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BxH,KAAK,CAACoH,QAAN,CAAe,EAAf,CAAhC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0B1H,KAAK,CAACoH,QAAN,CAAe,EAAf,CAAhC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0B5H,KAAK,CAACoH,QAAN,CAAe,EAAf,CAAhC,CAP6B,CAS7B;;AACA,QAAMS,WAAW,GAAIC,KAAD,IAAW;AAC3BX,IAAAA,QAAQ,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR;AACH,GAFD;;AAIA,QAAMC,cAAc,GAAIH,KAAD,IAAW;AAC9BN,IAAAA,WAAW,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACH,GAFD;;AAIA,QAAME,aAAa,GAAIJ,KAAD,IAAW;AAC7BR,IAAAA,UAAU,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACH,GAFD;;AAIA,QAAMG,cAAc,GAAIL,KAAD,IAAW;AAC9BJ,IAAAA,WAAW,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACH,GAFD;;AAIA,QAAMI,cAAc,GAAIN,KAAD,IAAW;AAC9BF,IAAAA,WAAW,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACH,GAFD;;AAIA,QAAMK,YAAY,GAAG,YAAY;AAC7B,QAAG;AACH,UAAIxE,OAAO,GAAG,EAAd;AACAA,MAAAA,OAAO,CAACsC,IAAR,CAAa,IAAIJ,UAAJ,CAAeC,MAAM,CAACC,IAAP,CAAY,QAAZ,CAAf,CAAb;AACApC,MAAAA,OAAO,CAACsC,IAAR,CAAa,IAAIJ,UAAJ,CAAeC,MAAM,CAACC,IAAP,CAAYiB,KAAZ,CAAf,CAAb;AACArD,MAAAA,OAAO,CAACsC,IAAR,CAAa,IAAIJ,UAAJ,CAAeC,MAAM,CAACC,IAAP,CAAYoB,OAAZ,CAAf,CAAb;AACAxD,MAAAA,OAAO,CAACsC,IAAR,CAAa,IAAIJ,UAAJ,CAAeC,MAAM,CAACC,IAAP,CAAYsB,QAAZ,CAAf,CAAb;AACA1D,MAAAA,OAAO,CAACsC,IAAR,CAAa,IAAIJ,UAAJ,CAAeC,MAAM,CAACC,IAAP,CAAYwB,QAAZ,CAAf,CAAb;AACA,UAAIa,cAAc,GAAG,MAAM5E,OAAO,CAAC3C,WAAD,EAAc,QAAd,EAAwB8C,OAAxB,CAAlC;AACC,KARD,CAQC,OAAME,KAAN,EAAY;AACTpC,MAAAA,OAAO,CAACoC,KAAR,CAAe,mCAAkCA,KAAM,EAAvD;AACH;AACJ,GAZD;;AAcA,QAAMwE,OAAO,GAAG,MAAM;AAClB,WAAO;AACH,eAASrB,KADN;AAEH,kBAAYO,QAFT;AAGH,kBAAYF,QAHT;AAIH,kBAAYI,QAJT;AAKH,iBAAWN;AALR,KAAP;AAOH,GARD;;AAUA,sBACI;AAAA,4BACI,QAAC,SAAD;AACI,MAAA,SAAS,EAAEJ,OAAO,CAAClF,MADvB;AAEI,MAAA,EAAE,EAAC,2BAFP;AAGI,MAAA,KAAK,EAAC,OAHV;AAII,MAAA,UAAU,EAAE;AACRyG,QAAAA,cAAc,eACV,QAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA;AAFI,OAJhB;AAUI,MAAA,OAAO,EAAEX;AAVb;AAAA;AAAA;AAAA;AAAA,YADJ,eAaI,QAAC,SAAD;AACI,MAAA,SAAS,EAAEZ,OAAO,CAAClF,MADvB;AAEI,MAAA,EAAE,EAAC,2BAFP;AAGI,MAAA,KAAK,EAAC,UAHV;AAII,MAAA,UAAU,EAAE;AACRyG,QAAAA,cAAc,eACV,QAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA;AAFI,OAJhB;AAUI,MAAA,OAAO,EAAEN;AAVb;AAAA;AAAA;AAAA;AAAA,YAbJ,eAyBI,QAAC,SAAD;AACI,MAAA,SAAS,EAAEjB,OAAO,CAAClF,MADvB;AAEI,MAAA,EAAE,EAAC,2BAFP;AAGI,MAAA,KAAK,EAAC,WAHV;AAII,MAAA,UAAU,EAAE;AACRyG,QAAAA,cAAc,eACV,QAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA;AAFI,OAJhB;AAUI,MAAA,OAAO,EAAEP;AAVb;AAAA;AAAA;AAAA;AAAA,YAzBJ,eAqCI,QAAC,SAAD;AACI,MAAA,SAAS,EAAEhB,OAAO,CAAClF,MADvB;AAEI,MAAA,EAAE,EAAC,2BAFP;AAGI,MAAA,KAAK,EAAC,WAHV;AAII,MAAA,UAAU,EAAE;AACRyG,QAAAA,cAAc,eACV,QAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA;AAFI,OAJhB;AAUI,MAAA,OAAO,EAAEL;AAVb;AAAA;AAAA;AAAA;AAAA,YArCJ,eAiDI,QAAC,SAAD;AACI,MAAA,SAAS,EAAElB,OAAO,CAAClF,MADvB;AAEI,MAAA,EAAE,EAAC,2BAFP;AAGI,MAAA,KAAK,EAAC,WAHV;AAII,MAAA,UAAU,EAAE;AACRyG,QAAAA,cAAc,eACV,QAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA;AAFI,OAJhB;AAUI,MAAA,OAAO,EAAEJ;AAVb;AAAA;AAAA;AAAA;AAAA,YAjDJ,eAyEI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzEJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA+EH;;GArIuBrB,M;UACJnF,S;;;KADImF,M","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nimport {toast} from 'react-toastify';\nimport { any } from 'prop-types';\nconst algosdk = require('algosdk');\nconst crypto = require('crypto');\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\nlet AlgoSigner;\nlet account;\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\nconst fs = require('fs');\nconst path = require('path');\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\n\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\n\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\nfunction hashPassPhrase(passPhrase) {\n    const hash = crypto.createHash('sha256')\n    hash.update(passPhrase)\n    return hash.digest('hex')\n}\n\n// helper function to await transaction confirmation\n// Function used to wait for a tx confirmation\nconst waitForConfirmation = async function (algodclient, txId) {\n    let status = (await algodclient.status().do());\n    let lastRound = status[\"last-round\"];\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n        lastRound++;\n        await algodclient.statusAfterBlock(lastRound).do();\n      }\n    };\n\n    async function getTestNetPrimaryAccount(){\n        await window.AlgoSigner.accounts({ledger: 'TestNet'})\n        .then((d) => {\n            if(d && d.length > 0){\n                console.log(`Account found: ${JSON.stringify(d[0])}`);\n                account = d[0];\n            }\n            else{\n                throw('Primary test account not found in AlgoSigner.');\n            }\n        })\n        .catch((e) => {\n            console.log(JSON.stringify(e),'bad');\n        });\n    }\n// call application \nasync function callApp(client, index, appArgs) {\n    // define sender\n   try{\n    if (typeof window.AlgoSigner !== 'undefined') {\n        console.log(\"algosigner installed\");\n      } else {\n        console.log(\"algosigner not installed\");\n      }\n      window.AlgoSigner.connect()\n      .then((d) => {\n        console.log(\"Connect\")\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n    getTestNetPrimaryAccount();\n    // get node suggested parameters\n    let params = await client.getTransactionParams().do();\n    // comment out the next two lines to use suggested fee\n    params.fee = 1000;\n    params.flatFee = true;\n\n    // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n    //let state= await client.accountInformation(account.addr).do()\n    //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n    let txn = algosdk.makeApplicationNoOpTxn(account.address, params, index, appArgs)\n    let txId = txn.txID().toString();\n    let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n    let signedTxs = await window.AlgoSigner.signTxn([\n     {\n        txn: base64Tx,\n     },\n    ]);\n\n    // Get the base64 encoded signed transaction and convert it to binary\n   let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);    \n    // Sign the transaction\n    console.log(\"Signed transaction with txID: %s\", txId);\n\n    // Submit the transaction\n    await client.sendRawTransaction(signedTxn).do();\n\n    // Wait for confirmation\n    await waitForConfirmation(client, txId);\n\n    // display results\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n    if (transactionResponse['global-state-delta'] !== undefined ) {\n        console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n    }\n    if (transactionResponse['local-state-delta'] !== undefined ) {\n        console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n    }\n    }catch(error){\n        console.log(`Failed: AddCar - ${error}`);\n        return 0;\n    }\n}\n\nasync function optIn(){\n    try{\n         // get suggested parameters\n    const params = await algodClient.getTransactionParams().do();\n    // comment out the next two lines to use suggested fee\n    params.fee = 1000;\n    params.flatFee = true;\n\n    const filePath = path.join(__dirname, 'samplearg.teal');\n\n    const data = fs.readFileSync(filePath);\n    const  results = await algodClient.compile(data).do();\n    console.log(\"Hash = \" + results.hash);\n    console.log(\"Result = \" + results.result);\n\n    const program = new Uint8Array(Buffer.from(results.result, \"base64\"));\n    // Use this if no args\n    // const lsig = algosdk.makeLogicSig(program);\n\n    // Initialize arguments array\n    const args = [];\n\n    // String parameter\n    // args.push([...Buffer.from(\"my string\")]);\n\n    // Integer parameter\n    args.push(algosdk.encodeUint64(123));\n\n\n    const lsig = algosdk.makeLogicSig(program, args);\n    console.log(\"lsig : \" + lsig.address());   \n\n    // create a transaction\n    const sender = lsig.address();\n    const receiver = \"<receiver-address>\";\n    const amount = 10000;\n    const closeToRemaninder = undefined;\n    const note = undefined;\n    const txn = algosdk.makePaymentTxnWithSuggestedParams(sender, receiver, amount, closeToRemaninder, note, params)\n\n    const rawSignedTxn = algosdk.signLogicSigTransactionObject(txn, lsig);\n\n    // send raw LogicSigTransaction to network\n    const tx = await algodClient.sendRawTransaction(rawSignedTxn.blob).do();\n    console.log(\"Transaction : \" + tx.txId);   \n    await waitForConfirmation(algodClient, tx.txId);\n    }catch(error){\n        console.log(error);\n    }\n}\n\n\n    \nexport default function AddCar() {\n    const classes = useStyles();\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [carMake, setCarMake] = React.useState('')\n    const [carModel, setCarModel] = React.useState('')\n    const [carColor, setCarColor] = React.useState('')\n    const [carOwner, setCarOwner] = React.useState('')\n\n    //Handlers\n    const handleCarID = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleCarModel = (event) => {\n        setCarModel(event.target.value)\n    }\n\n    const handleCarMake = (event) => {\n        setCarMake(event.target.value)\n    }\n\n    const handleCarColor = (event) => {\n        setCarColor(event.target.value)\n    }\n\n    const handleCarOwner = (event) => {\n        setCarOwner(event.target.value)\n    }\n\n    const handleSubmit = async () => {\n        try{\n        let appArgs = [];\n        appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n        appArgs.push(new Uint8Array(Buffer.from(carID)));\n        appArgs.push(new Uint8Array(Buffer.from(carMake)));\n        appArgs.push(new Uint8Array(Buffer.from(carModel)));\n        appArgs.push(new Uint8Array(Buffer.from(carColor)));\n        let createCarEvent = await callApp(algodClient, 23658482, appArgs);\n        }catch(error){\n            console.error(`Failed to evaluate transaction: ${error}`);\n        }\n    }\n\n    const allData = () => {\n        return {\n            'carID': carID,\n            'carColor': carColor,\n            'carModel': carModel,\n            'carOwner': carOwner,\n            'carMake': carMake\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarID}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Make\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarMake}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Model\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarModel}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Color\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarColor}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Owner\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarOwner}\n            />\n            {/* <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Secret Pass Phrase\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handlePassPhrase}\n            /> */}\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}