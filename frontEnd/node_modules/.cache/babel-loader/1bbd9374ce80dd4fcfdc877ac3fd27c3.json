{"ast":null,"code":"var _jsxFileName = \"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst algosdk = require('algosdk');\n\nconst crypto = require('crypto');\n\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort = \"\";\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\nvar check = algodClient.healthCheck().do();\n\nif (check) {\n  console.log(\"client connected\");\n}\n\nvar idxCheck = indexerClient.healthCheck().do();\n\nif (idxCheck) {\n  console.log(\"idx connected\");\n}\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n}));\n\nfunction hashPassPhrase(passPhrase) {\n  const hash = crypto.createHash('sha256');\n  hash.update(passPhrase);\n  return hash.digest('hex');\n} // helper function to await transaction confirmation\n// Function used to wait for a tx confirmation\n\n\nconst waitForConfirmation = async function (algodclient, txId) {\n  let status = await algodclient.status().do();\n  let lastRound = status[\"last-round\"];\n\n  while (true) {\n    const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n    if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n      //Got the completed Transaction\n      console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n      break;\n    }\n\n    lastRound++;\n    await algodclient.statusAfterBlock(lastRound).do();\n  }\n};\n\nif (typeof AlgoSigner !== 'undefined') {\n  document.getElementById('check-code').innerHTML = 'AlgoSigner is installed.';\n} else {\n  document.getElementById('check-code').innerHTML = 'AlgoSigner is NOT installed.';\n} // call application \n\n\nasync function callApp(client, account, index, appArgs) {\n  // define sender\n  try {\n    if (typeof AlgoSigner !== 'undefined') {\n      document.getElementById('check-code').innerHTML = 'AlgoSigner is installed.';\n    } else {\n      document.getElementById('check-code').innerHTML = 'AlgoSigner is NOT installed.';\n    }\n\n    AlgoSigner.connect().then(d => {\n      document.getElementById('connect-code').innerHTML = JSON.stringify(d);\n    }).catch(e => {\n      console.error(e);\n      document.getElementById('connect-code').innerHTML = JSON.stringify(e);\n    });\n    var sender = document.getElementById('from').value; // get node suggested parameters\n\n    let params = await client.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true; // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n    //let state= await client.accountInformation(account.addr).do()\n    //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n\n    let txn = algosdk.makeApplicationNoOpTxn(sender, params, index, appArgs);\n    let txId = txn.txID().toString();\n    const txn_b64 = AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n    var signedTxs = AlgoSigner.signTxn([{\n      txn: txn_b64\n    }]); // Sign the transaction\n\n    console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n    await client.sendRawTransaction(signedTxs).do(); // Wait for confirmation\n\n    await waitForConfirmation(client, txId); // display results\n\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    console.log(\"Called app-id:\", transactionResponse['txn']['txn']['apid']);\n\n    if (transactionResponse['global-state-delta'] !== undefined) {\n      console.log(\"Global State updated:\", transactionResponse['global-state-delta']);\n    }\n\n    if (transactionResponse['local-state-delta'] !== undefined) {\n      console.log(\"Local State updated:\", transactionResponse['local-state-delta']);\n    }\n  } catch (error) {\n    console.log(`Failed: AddCar - ${error}`);\n    return 0;\n  }\n}\n\nexport default function AddCar() {\n  _s();\n\n  const classes = useStyles(); //States\n\n  const [carID, setCarID] = React.useState('');\n  const [carMake, setCarMake] = React.useState('');\n  const [carModel, setCarModel] = React.useState('');\n  const [carColor, setCarColor] = React.useState('');\n  const [carOwner, setCarOwner] = React.useState('');\n  const [passPhrase, setPassPhrase] = React.useState(''); //Handlers\n\n  const handleCarID = event => {\n    setCarID(event.target.value);\n  };\n\n  const handleCarModel = event => {\n    setCarModel(event.target.value);\n  };\n\n  const handleCarMake = event => {\n    setCarMake(event.target.value);\n  };\n\n  const handleCarColor = event => {\n    setCarColor(event.target.value);\n  };\n\n  const handleCarOwner = event => {\n    setCarOwner(event.target.value);\n  };\n\n  const handlePassPhrase = event => {\n    setPassPhrase(event.target.value);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      let status = await algodClient.status().do();\n      console.log(\"Algorand network status: %o\", status);\n      let appArgs = [];\n      appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n      appArgs.push(new Uint8Array(Buffer.from(carID)));\n      appArgs.push(new Uint8Array(Buffer.from(carMake)));\n      appArgs.push(new Uint8Array(Buffer.from(carModel)));\n      appArgs.push(new Uint8Array(Buffer.from(carColor)));\n      let createCarEvent = await callApp(algodClient, 23658482, appArgs);\n    } catch (error) {\n      console.error(`Failed to evaluate transaction: ${error}`);\n      process.exit(1);\n    }\n  };\n\n  const allData = () => {\n    return {\n      'carID': carID,\n      'carColor': carColor,\n      'carModel': carModel,\n      'carOwner': carOwner,\n      'carMake': carMake,\n      'passPhrase': passPhrase\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"CarID\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Make\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarMake\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Model\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Color\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Owner\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarOwner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddCar, \"uDLotIQRX0NmjDAMteeONv0eOVc=\", false, function () {\n  return [useStyles];\n});\n\n_c = AddCar;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCar\");","map":{"version":3,"sources":["/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCar.js"],"names":["React","makeStyles","InputAdornment","TextField","Button","toast","algosdk","require","crypto","algodAddress","algodToken","algodPort","algodClient","Algodv2","indexer_token","indexer_server","indexer_port","indexerClient","Indexer","check","healthCheck","do","console","log","idxCheck","useStyles","theme","margin","spacing","hashPassPhrase","passPhrase","hash","createHash","update","digest","waitForConfirmation","algodclient","txId","status","lastRound","pendingInfo","pendingTransactionInformation","statusAfterBlock","AlgoSigner","document","getElementById","innerHTML","callApp","client","account","index","appArgs","connect","then","d","JSON","stringify","catch","e","error","sender","value","params","getTransactionParams","fee","flatFee","txn","makeApplicationNoOpTxn","txID","toString","txn_b64","encoding","msgpackToBase64","toByte","signedTxs","signTxn","sendRawTransaction","transactionResponse","undefined","AddCar","classes","carID","setCarID","useState","carMake","setCarMake","carModel","setCarModel","carColor","setCarColor","carOwner","setCarOwner","setPassPhrase","handleCarID","event","target","handleCarModel","handleCarMake","handleCarColor","handleCarOwner","handlePassPhrase","handleSubmit","push","Uint8Array","Buffer","from","createCarEvent","process","exit","allData","startAdornment"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nimport {toast} from 'react-toastify';\nconst algosdk = require('algosdk');\nconst crypto = require('crypto');\n\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\n\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\n\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\n\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\n\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\nvar idxCheck = indexerClient.healthCheck().do();\nif (idxCheck){\n    console.log(\"idx connected\")\n}\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\nfunction hashPassPhrase(passPhrase) {\n    const hash = crypto.createHash('sha256')\n    hash.update(passPhrase)\n    return hash.digest('hex')\n}\n\n// helper function to await transaction confirmation\n// Function used to wait for a tx confirmation\nconst waitForConfirmation = async function (algodclient, txId) {\n    let status = (await algodclient.status().do());\n    let lastRound = status[\"last-round\"];\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n        lastRound++;\n        await algodclient.statusAfterBlock(lastRound).do();\n      }\n    };\n\nif (typeof AlgoSigner !== 'undefined') {\n    document.getElementById('check-code').innerHTML = 'AlgoSigner is installed.';\n  } else {\n    document.getElementById('check-code').innerHTML = 'AlgoSigner is NOT installed.';\n  }\n\n// call application \nasync function callApp(client, account, index, appArgs) {\n    // define sender\n   try{\n    if (typeof AlgoSigner !== 'undefined') {\n        document.getElementById('check-code').innerHTML = 'AlgoSigner is installed.';\n      } else {\n        document.getElementById('check-code').innerHTML = 'AlgoSigner is NOT installed.';\n      }\n    AlgoSigner.connect()\n      .then((d) => {\n        document.getElementById('connect-code').innerHTML = JSON.stringify(d);\n      })\n      .catch((e) => {\n        console.error(e);\n        document.getElementById('connect-code').innerHTML = JSON.stringify(e);\n      });\n      \n      \n    var sender = document.getElementById('from').value;\n\n    // get node suggested parameters\n    let params = await client.getTransactionParams().do();\n    // comment out the next two lines to use suggested fee\n    params.fee = 1000;\n    params.flatFee = true;\n\n    // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n    //let state= await client.accountInformation(account.addr).do()\n    //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n    let txn = algosdk.makeApplicationNoOpTxn(sender, params, index, appArgs)\n    let txId = txn.txID().toString();\n\n    const txn_b64 = AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n    var signedTxs = AlgoSigner.signTxn([{txn: txn_b64}]);\n    \n    // Sign the transaction\n    console.log(\"Signed transaction with txID: %s\", txId);\n\n    // Submit the transaction\n    await client.sendRawTransaction(signedTxs).do();\n\n    // Wait for confirmation\n    await waitForConfirmation(client, txId);\n\n    // display results\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n    if (transactionResponse['global-state-delta'] !== undefined ) {\n        console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n    }\n    if (transactionResponse['local-state-delta'] !== undefined ) {\n        console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n    }\n    }catch(error){\n        console.log(`Failed: AddCar - ${error}`);\n        return 0;\n    }\n}\n\n\n\n    \nexport default function AddCar() {\n    const classes = useStyles();\n\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [carMake, setCarMake] = React.useState('')\n    const [carModel, setCarModel] = React.useState('')\n    const [carColor, setCarColor] = React.useState('')\n    const [carOwner, setCarOwner] = React.useState('')\n    const [passPhrase, setPassPhrase] = React.useState('')\n\n    //Handlers\n    const handleCarID = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleCarModel = (event) => {\n        setCarModel(event.target.value)\n    }\n\n    const handleCarMake = (event) => {\n        setCarMake(event.target.value)\n    }\n\n    const handleCarColor = (event) => {\n        setCarColor(event.target.value)\n    }\n\n    const handleCarOwner = (event) => {\n        setCarOwner(event.target.value)\n    }\n\n    const handlePassPhrase = (event) => {\n        setPassPhrase(event.target.value)\n    }\n\n\n    const handleSubmit = async () => {\n        try{\n        let status = (await algodClient.status().do());\n        console.log(\"Algorand network status: %o\", status);\n        let appArgs = [];\n        appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n        appArgs.push(new Uint8Array(Buffer.from(carID)));\n        appArgs.push(new Uint8Array(Buffer.from(carMake)));\n        appArgs.push(new Uint8Array(Buffer.from(carModel)));\n        appArgs.push(new Uint8Array(Buffer.from(carColor)));\n        let createCarEvent = await callApp(algodClient, 23658482, appArgs);\n        }catch(error){\n            console.error(`Failed to evaluate transaction: ${error}`);\n            process.exit(1);\n        }\n    }\n\n    const allData = () => {\n        return {\n            'carID': carID,\n            'carColor': carColor,\n            'carModel': carModel,\n            'carOwner': carOwner,\n            'carMake': carMake,\n            'passPhrase': passPhrase,\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarID}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Make\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarMake}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Model\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarModel}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Color\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarColor}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Owner\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarOwner}\n            />\n            {/* <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Secret Pass Phrase\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handlePassPhrase}\n            /> */}\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}