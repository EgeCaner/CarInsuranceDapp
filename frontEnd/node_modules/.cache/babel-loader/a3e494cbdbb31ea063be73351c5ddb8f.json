{"ast":null,"code":"var _jsxFileName = \"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst algosdk = require('algosdk');\n\nconst crypto = require('crypto');\n\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort = \"\";\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\nvar check = algodClient.healthCheck().do();\n\nif (check) {\n  console.log(\"client connected\");\n}\n\nvar idxCheck = indexerClient.healthCheck().do();\n\nif (idxCheck) {\n  console.log(\"idx connected\");\n}\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n}));\n\nfunction hashPassPhrase(passPhrase) {\n  const hash = crypto.createHash('sha256');\n  hash.update(passPhrase);\n  return hash.digest('hex');\n}\n\nif (typeof AlgoSigner !== 'undefined') {\n  document.getElementById('check-code').innerHTML = 'AlgoSigner is installed.';\n} else {\n  document.getElementById('check-code').innerHTML = 'AlgoSigner is NOT installed.';\n}\n\nexport default function AddCar() {\n  _s();\n\n  const classes = useStyles(); //States\n\n  const [carID, setCarID] = React.useState('');\n  const [carMake, setCarMake] = React.useState('');\n  const [carModel, setCarModel] = React.useState('');\n  const [carColor, setCarColor] = React.useState('');\n  const [carOwner, setCarOwner] = React.useState('');\n  const [passPhrase, setPassPhrase] = React.useState(''); //Handlers\n\n  const handleCarID = event => {\n    setCarID(event.target.value);\n  };\n\n  const handleCarModel = event => {\n    setCarModel(event.target.value);\n  };\n\n  const handleCarMake = event => {\n    setCarMake(event.target.value);\n  };\n\n  const handleCarColor = event => {\n    setCarColor(event.target.value);\n  };\n\n  const handleCarOwner = event => {\n    setCarOwner(event.target.value);\n  };\n\n  const handlePassPhrase = event => {\n    setPassPhrase(event.target.value);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      let status = await algodClient.status().do();\n      console.log(\"Algorand network status: %o\", status);\n      let appArgs = [];\n      appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n      appArgs.push(new Uint8Array(Buffer.from(req.body.carID)));\n      appArgs.push(new Uint8Array(Buffer.from(req.body.carMake)));\n      appArgs.push(new Uint8Array(Buffer.from(req.body.carModel)));\n      appArgs.push(new Uint8Array(Buffer.from(req.body.carColor)));\n      let createCarEvent = await callApp(algodClient, creatorAccount, 23658482, appArgs);\n\n      if (createCarEvent != 0) {\n        res.status(200).send({\n          status: 200,\n          message: `Transaction Submitted: Car Added for ${req.body.carOwner}`\n        });\n      } else {\n        res.status(500).send({\n          status: 500,\n          message: `Error!!! Failed to add Car for ${req.body.carOwner}`\n        });\n      }\n    } catch (error) {\n      console.error(`Failed to evaluate transaction: ${error}`);\n      res.status(500).json({\n        error: error\n      });\n      process.exit(1);\n    }\n  };\n\n  const allData = () => {\n    return {\n      'carID': carID,\n      'carColor': carColor,\n      'carModel': carModel,\n      'carOwner': carOwner,\n      'carMake': carMake,\n      'passPhrase': passPhrase\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"CarID\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Make\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarMake\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Model\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Color\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Owner\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarOwner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddCar, \"uDLotIQRX0NmjDAMteeONv0eOVc=\", false, function () {\n  return [useStyles];\n});\n\n_c = AddCar;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCar\");","map":{"version":3,"sources":["/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCar.js"],"names":["React","makeStyles","InputAdornment","TextField","Button","toast","algosdk","require","crypto","algodAddress","algodToken","algodPort","algodClient","Algodv2","indexer_token","indexer_server","indexer_port","indexerClient","Indexer","check","healthCheck","do","console","log","idxCheck","useStyles","theme","margin","spacing","hashPassPhrase","passPhrase","hash","createHash","update","digest","AlgoSigner","document","getElementById","innerHTML","AddCar","classes","carID","setCarID","useState","carMake","setCarMake","carModel","setCarModel","carColor","setCarColor","carOwner","setCarOwner","setPassPhrase","handleCarID","event","target","value","handleCarModel","handleCarMake","handleCarColor","handleCarOwner","handlePassPhrase","handleSubmit","status","appArgs","push","Uint8Array","Buffer","from","req","body","createCarEvent","callApp","creatorAccount","res","send","message","error","json","process","exit","allData","startAdornment"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nimport {toast} from 'react-toastify';\nconst algosdk = require('algosdk');\nconst crypto = require('crypto');\n\n\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\n\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\n\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\n\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\n\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\nvar idxCheck = indexerClient.healthCheck().do();\nif (idxCheck){\n    console.log(\"idx connected\")\n}\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\nfunction hashPassPhrase(passPhrase) {\n    const hash = crypto.createHash('sha256')\n    hash.update(passPhrase)\n    return hash.digest('hex')\n}\n\nif (typeof AlgoSigner !== 'undefined') {\n    document.getElementById('check-code').innerHTML = 'AlgoSigner is installed.';\n  } else {\n    document.getElementById('check-code').innerHTML = 'AlgoSigner is NOT installed.';\n  }\n\n\n\n\nexport default function AddCar() {\n    const classes = useStyles();\n\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [carMake, setCarMake] = React.useState('')\n    const [carModel, setCarModel] = React.useState('')\n    const [carColor, setCarColor] = React.useState('')\n    const [carOwner, setCarOwner] = React.useState('')\n    const [passPhrase, setPassPhrase] = React.useState('')\n\n    //Handlers\n    const handleCarID = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleCarModel = (event) => {\n        setCarModel(event.target.value)\n    }\n\n    const handleCarMake = (event) => {\n        setCarMake(event.target.value)\n    }\n\n    const handleCarColor = (event) => {\n        setCarColor(event.target.value)\n    }\n\n    const handleCarOwner = (event) => {\n        setCarOwner(event.target.value)\n    }\n\n    const handlePassPhrase = (event) => {\n        setPassPhrase(event.target.value)\n    }\n\n    const handleSubmit = async () => {\n        try{\n            let status = (await algodClient.status().do());\n        console.log(\"Algorand network status: %o\", status);\n        let appArgs = [];\n        appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n        appArgs.push(new Uint8Array(Buffer.from(req.body.carID)));\n        appArgs.push(new Uint8Array(Buffer.from(req.body.carMake)));\n        appArgs.push(new Uint8Array(Buffer.from(req.body.carModel)));\n        appArgs.push(new Uint8Array(Buffer.from(req.body.carColor)));\n        let createCarEvent = await callApp(algodClient,creatorAccount, 23658482, appArgs);\n        if (createCarEvent != 0) {\n            res.status(200).send({status: 200, message: `Transaction Submitted: Car Added for ${req.body.carOwner}`})\n        } else {\n            res.status(500).send({status: 500, message: `Error!!! Failed to add Car for ${req.body.carOwner}`})\n        }\n        }catch(error){\n            console.error(`Failed to evaluate transaction: ${error}`);\n            res.status(500).json({ error: error });\n            process.exit(1);\n        }\n    }\n\n    const allData = () => {\n        return {\n            'carID': carID,\n            'carColor': carColor,\n            'carModel': carModel,\n            'carOwner': carOwner,\n            'carMake': carMake,\n            'passPhrase': passPhrase,\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarID}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Make\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarMake}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Model\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarModel}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Color\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarColor}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Owner\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarOwner}\n            />\n            {/* <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Secret Pass Phrase\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handlePassPhrase}\n            /> */}\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}