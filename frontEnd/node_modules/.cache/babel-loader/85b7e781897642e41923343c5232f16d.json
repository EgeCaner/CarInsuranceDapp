{"ast":null,"code":"var _jsxFileName = \"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/changeOwner.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst crypto = require('crypto');\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n})); // function hashPassPhrase(passPhrase) {\n//     const hash = crypto.createHash('sha256')\n//     hash.update(passPhrase)\n//     return hash.digest('hex')\n// }\n\nexport default function ChangeCarOwner() {\n  _s();\n\n  const classes = useStyles(); //States\n\n  const [carID, setCarID] = React.useState('');\n  const [newOwner, setNewOwner] = React.useState('');\n  const [passPhrase, setPassPhrase] = React.useState(''); //State Handlers\n\n  const handleCarID = event => {\n    setCarID(event.target.value);\n  };\n\n  const handleNewOwner = event => {\n    setNewOwner(event.target.value);\n  };\n\n  const handlePassPhrase = event => {\n    setPassPhrase(event.target.value);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      if (typeof window.AlgoSigner !== 'undefined') {\n        console.log(\"algosigner installed\");\n      } else {\n        console.log(\"algosigner not installed\");\n      }\n\n      window.AlgoSigner.connect().then(d => {\n        console.log(\"Connect\");\n      }).catch(e => {\n        console.error(e);\n      });\n      getTestNetPrimaryAccount(); // get node suggested parameters\n\n      let params = await algodClient.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true;\n      let appArgs = [];\n      appArgs.push(new Uint8Array(Buffer.from(\"changeOwner\"))); // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n      //let state= await client.accountInformation(account.addr).do()\n      //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n\n      let txn = algosdk.makeApplicationNoOpTxn(sender, params, 23658482, appArgs, [req.body.carOwner]);\n      let txId = txn.txID().toString(); // Sign the transaction\n\n      let signedTxn = txn.signTxn(creatorAccount.sk);\n      console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n      await algodClient.sendRawTransaction(signedTxn).do(); // Wait for confirmation\n\n      await waitForConfirmation(algodClient, txId); // display results\n\n      let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n      console.log(\"Called app-id:\", transactionResponse['txn']['txn']['apid']);\n\n      if (transactionResponse['global-state-delta'] !== undefined) {\n        console.log(\"Global State updated:\", transactionResponse['global-state-delta']);\n      }\n\n      if (transactionResponse['local-state-delta'] !== undefined) {\n        console.log(\"Local State updated:\", transactionResponse['local-state-delta']);\n      }\n    } catch (error) {\n      console.log(`${RED}<-- Failed: AddCar - ${err}${RESET}`);\n      return 0;\n    }\n  };\n\n  const allData = () => {\n    return {\n      'carID': carID,\n      'carOwner': newOwner,\n      'passPhrase': passPhrase\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"CarID\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"New Car Owner\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleNewOwner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChangeCarOwner, \"4+xGXy4SlWvNaAHL5CDF863dN8Y=\", false, function () {\n  return [useStyles];\n});\n\n_c = ChangeCarOwner;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangeCarOwner\");","map":{"version":3,"sources":["/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/changeOwner.js"],"names":["React","makeStyles","InputAdornment","Button","TextField","toast","crypto","require","useStyles","theme","margin","spacing","ChangeCarOwner","classes","carID","setCarID","useState","newOwner","setNewOwner","passPhrase","setPassPhrase","handleCarID","event","target","value","handleNewOwner","handlePassPhrase","handleSubmit","window","AlgoSigner","console","log","connect","then","d","catch","e","error","getTestNetPrimaryAccount","params","algodClient","getTransactionParams","do","fee","flatFee","appArgs","push","Uint8Array","Buffer","from","txn","algosdk","makeApplicationNoOpTxn","sender","req","body","carOwner","txId","txID","toString","signedTxn","signTxn","creatorAccount","sk","sendRawTransaction","waitForConfirmation","transactionResponse","pendingTransactionInformation","undefined","RED","err","RESET","allData","startAdornment"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField';\nimport {toast} from 'react-toastify'\nconst crypto = require('crypto')\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\n// function hashPassPhrase(passPhrase) {\n//     const hash = crypto.createHash('sha256')\n//     hash.update(passPhrase)\n//     return hash.digest('hex')\n// }\n\nexport default function ChangeCarOwner() {\n    const classes = useStyles();\n\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [newOwner, setNewOwner] = React.useState('')\n    const [passPhrase, setPassPhrase] = React.useState('')\n\n    //State Handlers\n    const handleCarID = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleNewOwner = (event) => {\n        setNewOwner(event.target.value)\n    }\n\n    const handlePassPhrase = (event) => {\n        setPassPhrase(event.target.value)\n    }\n\n    const handleSubmit = async () => {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"changeOwner\")));\n            // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n            //let state= await client.accountInformation(account.addr).do()\n            //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n            let txn = algosdk.makeApplicationNoOpTxn(sender, params, 23658482, appArgs,[req.body.carOwner])\n            let txId = txn.txID().toString();\n        \n            // Sign the transaction\n            let signedTxn = txn.signTxn(creatorAccount.sk);\n            console.log(\"Signed transaction with txID: %s\", txId);\n        \n            // Submit the transaction\n            await algodClient.sendRawTransaction(signedTxn).do();\n        \n            // Wait for confirmation\n            await waitForConfirmation(algodClient, txId);\n        \n            // display results\n            let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n            console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n            if (transactionResponse['global-state-delta'] !== undefined ) {\n                console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n            }\n            if (transactionResponse['local-state-delta'] !== undefined ) {\n                console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n            }\n            }catch(error){\n                console.log(`${RED}<-- Failed: AddCar - ${err}${RESET}`);\n                return 0;\n            }\n    }\n\n    const allData = () => {\n        return {\n            'carID': carID,\n            'carOwner': newOwner,\n            'passPhrase': passPhrase,\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarID}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"New Car Owner\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleNewOwner}\n            />\n            {/* <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Secret Pass Phrase\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handlePassPhrase}\n            /> */}\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}