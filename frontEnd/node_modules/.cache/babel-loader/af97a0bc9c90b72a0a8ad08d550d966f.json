{"ast":null,"code":"var _jsxFileName = \"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst algosdk = require('algosdk');\n\nconst crypto = require('crypto');\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n}));\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort = \"\";\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\nvar check = algodClient.healthCheck().do();\n\nif (check) {\n  console.log(\"client connected\");\n}\n\nfunction hashPassPhrase(passPhrase) {\n  const hash = crypto.createHash('sha256');\n  hash.update(passPhrase);\n  return hash.digest('hex');\n}\n\nexport default function AddCar() {\n  _s();\n\n  const classes = useStyles(); //States\n\n  const [carID, setCarID] = React.useState('');\n  const [carMake, setCarMake] = React.useState('');\n  const [carModel, setCarModel] = React.useState('');\n  const [carColor, setCarColor] = React.useState(''); //    const [carOwner, setCarOwner] = React.useState('')\n  //    const [passPhrase, setPassPhrase] = React.useState('')\n  //Handlers\n\n  const handleCarID = event => {\n    setCarID(event.target.value);\n  };\n\n  const handleCarModel = event => {\n    setCarModel(event.target.value);\n  };\n\n  const handleCarMake = event => {\n    setCarMake(event.target.value);\n  };\n\n  const handleCarColor = event => {\n    setCarColor(event.target.value);\n  }; // call application \n\n\n  async function callApp(client, index, appArgs) {\n    // define sender\n    try {\n      //get the account\n      // get node suggested parameters\n      let params = await client.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true; // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n      //let state= await client.accountInformation(account.addr).do()\n      //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n\n      let txn = algosdk.makeApplicationNoOpTxn(sender, params, index, appArgs);\n      let txId = txn.txID().toString(); // Sign the transaction\n\n      let signedTxn = txn.signTxn(account.sk);\n      console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n      await client.sendRawTransaction(signedTxn).do(); // Wait for confirmation\n\n      await waitForConfirmation(client, txId); // display results\n\n      let transactionResponse = await client.pendingTransactionInformation(txId).do();\n      console.log(\"Called app-id:\", transactionResponse['txn']['txn']['apid']);\n\n      if (transactionResponse['global-state-delta'] !== undefined) {\n        console.log(\"Global State updated:\", transactionResponse['global-state-delta']);\n      }\n\n      if (transactionResponse['local-state-delta'] !== undefined) {\n        console.log(\"Local State updated:\", transactionResponse['local-state-delta']);\n      }\n    } catch (error) {\n      console.log(`${RED}<-- Failed: AddCar - ${err}${RESET}`);\n      return 0;\n    }\n  }\n\n  const handleSubmit = async () => {\n    try {\n      let status = await algodClient.status().do();\n      console.log(\"Algorand network status: %o\", status);\n      let appArgs = [];\n      appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n      appArgs.push(new Uint8Array(Buffer.from(carID)));\n      appArgs.push(new Uint8Array(Buffer.from(carMake)));\n      appArgs.push(new Uint8Array(Buffer.from(carModel)));\n      appArgs.push(new Uint8Array(Buffer.from(carColor)));\n      let createCarEvent = await callApp(algodClient, 23658482, appArgs);\n\n      if (createCarEvent != 0) {\n        res.status(200).send({\n          status: 200,\n          message: `Transaction Submitted: Car Added for ${req.body.carOwner}`\n        });\n      } else {\n        res.status(500).send({\n          status: 500,\n          message: `Error!!! Failed to add Car for ${req.body.carOwner}`\n        });\n      }\n    } catch (error) {\n      console.error(`Failed to evaluate transaction: ${error}`);\n      res.status(500).json({\n        error: error\n      });\n      process.exit(1);\n    }\n  };\n\n  const allData = () => {\n    return {\n      'carID': carID,\n      'carColor': carColor,\n      'carModel': carModel,\n      'carOwner': carOwner,\n      'carMake': carMake,\n      'passPhrase': passPhrase\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"CarID\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Make\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarMake\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Model\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Color\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Owner\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarOwner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddCar, \"6EBnyvQ/lOQzKn9T9gERXcs1Zho=\", false, function () {\n  return [useStyles];\n});\n\n_c = AddCar;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCar\");","map":{"version":3,"sources":["/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCar.js"],"names":["React","makeStyles","InputAdornment","TextField","Button","toast","algosdk","require","crypto","useStyles","theme","margin","spacing","algodAddress","algodToken","algodPort","algodClient","Algodv2","check","healthCheck","do","console","log","hashPassPhrase","passPhrase","hash","createHash","update","digest","AddCar","classes","carID","setCarID","useState","carMake","setCarMake","carModel","setCarModel","carColor","setCarColor","handleCarID","event","target","value","handleCarModel","handleCarMake","handleCarColor","callApp","client","index","appArgs","params","getTransactionParams","fee","flatFee","txn","makeApplicationNoOpTxn","sender","txId","txID","toString","signedTxn","signTxn","account","sk","sendRawTransaction","waitForConfirmation","transactionResponse","pendingTransactionInformation","undefined","error","RED","err","RESET","handleSubmit","status","push","Uint8Array","Buffer","from","createCarEvent","res","send","message","req","body","carOwner","json","process","exit","allData","startAdornment","handleCarOwner"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core'\nimport {toast} from 'react-toastify'\n\nconst algosdk = require('algosdk');\n\nconst crypto = require('crypto')\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\n\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\n\n\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\n\nfunction hashPassPhrase(passPhrase) {\n    const hash = crypto.createHash('sha256')\n    hash.update(passPhrase)\n    return hash.digest('hex')\n}\n\nexport default function AddCar() {\n    const classes = useStyles();\n\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [carMake, setCarMake] = React.useState('')\n    const [carModel, setCarModel] = React.useState('')\n    const [carColor, setCarColor] = React.useState('')\n//    const [carOwner, setCarOwner] = React.useState('')\n//    const [passPhrase, setPassPhrase] = React.useState('')\n\n    //Handlers\n    const handleCarID = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleCarModel = (event) => {\n        setCarModel(event.target.value)\n    }\n\n    const handleCarMake = (event) => {\n        setCarMake(event.target.value)\n    }\n\n    const handleCarColor = (event) => {\n        setCarColor(event.target.value)\n    }\n\n    // call application \n    async function callApp(client, index, appArgs) {\n        // define sender\n    try{\n        //get the account\n\n\n        // get node suggested parameters\n        let params = await client.getTransactionParams().do();\n        // comment out the next two lines to use suggested fee\n        params.fee = 1000;\n        params.flatFee = true;\n\n        // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n        //let state= await client.accountInformation(account.addr).do()\n        //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n        let txn = algosdk.makeApplicationNoOpTxn(sender, params, index, appArgs)\n        let txId = txn.txID().toString();\n\n        // Sign the transaction\n        let signedTxn = txn.signTxn(account.sk);\n        console.log(\"Signed transaction with txID: %s\", txId);\n\n        // Submit the transaction\n        await client.sendRawTransaction(signedTxn).do();\n\n        // Wait for confirmation\n        await waitForConfirmation(client, txId);\n\n        // display results\n        let transactionResponse = await client.pendingTransactionInformation(txId).do();\n        console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n        if (transactionResponse['global-state-delta'] !== undefined ) {\n            console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n        }\n        if (transactionResponse['local-state-delta'] !== undefined ) {\n            console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n        }\n        }catch(error){\n            console.log(`${RED}<-- Failed: AddCar - ${err}${RESET}`);\n            return 0;\n        }\n    }\n\n    const handleSubmit = async () => {\n        try{\n            let status = (await algodClient.status().do());\n            console.log(\"Algorand network status: %o\", status);\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n            appArgs.push(new Uint8Array(Buffer.from(carID)));\n            appArgs.push(new Uint8Array(Buffer.from(carMake)));\n            appArgs.push(new Uint8Array(Buffer.from(carModel)));\n            appArgs.push(new Uint8Array(Buffer.from(carColor)));\n            let createCarEvent = await callApp(algodClient, 23658482, appArgs);\n            if (createCarEvent != 0) {\n                res.status(200).send({status: 200, message: `Transaction Submitted: Car Added for ${req.body.carOwner}`})\n            } else {\n                res.status(500).send({status: 500, message: `Error!!! Failed to add Car for ${req.body.carOwner}`})\n            }\n            }catch(error){\n                console.error(`Failed to evaluate transaction: ${error}`);\n                res.status(500).json({ error: error });\n                process.exit(1);\n            }\n    }\n\n    const allData = () => {\n        return {\n            'carID': carID,\n            'carColor': carColor,\n            'carModel': carModel,\n            'carOwner': carOwner,\n            'carMake': carMake,\n            'passPhrase': passPhrase,\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarID}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Make\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarMake}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Model\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarModel}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Color\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarColor}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Owner\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarOwner}\n            />\n            {/* <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Secret Pass Phrase\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handlePassPhrase}\n            /> */}\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}