{"ast":null,"code":"var _jsxFileName = \"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCarWithInsurance.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst algosdk = require('algosdk');\n\nlet account;\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort = \"\";\nlet stateless_acc_addr;\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\nvar check = algodClient.healthCheck().do();\n\nif (check) {\n  console.log(\"client connected\");\n}\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n}));\n\nconst waitForConfirmation = async function (algodclient, txId) {\n  let status = await algodclient.status().do();\n  let lastRound = status[\"last-round\"];\n\n  while (true) {\n    const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n    if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n      //Got the completed Transaction\n      console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n      break;\n    }\n\n    lastRound++;\n    await algodclient.statusAfterBlock(lastRound).do();\n  }\n};\n\nasync function getTestNetPrimaryAccount() {\n  await window.AlgoSigner.accounts({\n    ledger: 'TestNet'\n  }).then(d => {\n    if (d && d.length > 0) {\n      console.log(`Account found: ${JSON.stringify(d[0])}`);\n      account = d[0];\n    } else {\n      throw 'Primary test account not found in AlgoSigner.';\n    }\n  }).catch(e => {\n    console.log(JSON.stringify(e), 'bad');\n  });\n}\n\nasync function payment(to, amount, client) {\n  try {\n    window.AlgoSigner.connect().then(d => {\n      console.log(\"Connect\");\n    }).catch(e => {\n      console.error(e);\n    });\n    getTestNetPrimaryAccount(); // get node suggested parameters\n\n    let params = await client.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true; // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n    //let state= await client.accountInformation(account.addr).do()\n    //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n\n    const closeToRemaninder = undefined;\n    const note = undefined;\n    let txn = algosdk.makePaymentTxnWithSuggestedParams(account.address, to, amount, closeToRemaninder, note, params);\n    let txId = txn.txID().toString();\n    let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n    let signedTxs = await window.AlgoSigner.signTxn([{\n      txn: base64Tx\n    }]); // Get the base64 encoded signed transaction and convert it to binary\n\n    let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); // Sign the transaction\n\n    console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n    await client.sendRawTransaction(signedTxn).do(); // Wait for confirmation\n\n    await waitForConfirmation(client, txId); // display results\n\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    console.log(\"Called app-id:\", transactionResponse['txn']['txn']['apid']);\n\n    if (transactionResponse['global-state-delta'] !== undefined) {\n      console.log(\"Global State updated:\", transactionResponse['global-state-delta']);\n    }\n\n    if (transactionResponse['local-state-delta'] !== undefined) {\n      console.log(\"Local State updated:\", transactionResponse['local-state-delta']);\n    }\n  } catch (error) {\n    console.log(`Failed: Payment: - ${error}`);\n    return 0;\n  }\n}\n\nasync function optIn() {\n  try {\n    // get suggested parameters\n    const params = await algodClient.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true;\n    let rand = Math.floor(Math.random() * 2 ** 64);\n    const data = \"#pragma version 4\\n\" + \"int \" + rand.toString() + \"\\nint \" + rand.toString() + \"\\n>\\nbz success\\nint 1\\nreturn\\nsuccess:\\nint 1\\nreturn\";\n    console.log(data);\n    const results = await algodClient.compile(data).do();\n    console.log(\"Hash = \" + results.hash);\n    console.log(\"Result = \" + results.result);\n    const program = new Uint8Array(Buffer.from(results.result, \"base64\"));\n    const lsig = algosdk.makeLogicSig(program);\n    console.log(\"lsig : \" + lsig.address()); // create a transaction\n\n    const sender = lsig.address();\n    await payment(sender, 1000000, algodClient);\n    stateless_acc_addr = sender;\n    const txn_1 = algosdk.makeApplicationOptInTxn(sender, params, 25540600);\n    const txn_2 = algosdk.makeApplicationOptInTxn(sender, params, 25532407);\n    let txns = [txn_1, txn_2];\n    let txgroup = algosdk.assignGroupID(txns);\n    const rawSignedTxn_1 = algosdk.signLogicSigTransactionObject(txgroup[0], lsig);\n    const rawSignedTxn_2 = algosdk.signLogicSigTransactionObject(txgroup[1], lsig);\n    let signedTxns = [rawSignedTxn_1, rawSignedTxn_2]; // send raw LogicSigTransaction to network\n\n    const tx = await algodClient.sendRawTransaction(signedTxns).do();\n    console.log(\"Transaction : \" + tx.txId);\n    await waitForConfirmation(algodClient, tx.txId);\n    return lsig.address();\n  } catch (error) {\n    console.log(\"OptIn: \" + error);\n  }\n}\n\nexport default function AddCar() {\n  _s();\n\n  const classes = useStyles(); //States\n\n  const [carID, setCarID] = React.useState('');\n  const [carMake, setCarMake] = React.useState('');\n  const [carModel, setCarModel] = React.useState('');\n  const [carColor, setCarColor] = React.useState('');\n  const [carOwner, setCarOwner] = React.useState('');\n  const [carInsurance, setCarInsurance] = React.useState(''); //Handlers\n\n  const handleCarID = event => {\n    setCarID(event.target.value);\n  };\n\n  const handleCarModel = event => {\n    setCarModel(event.target.value);\n  };\n\n  const handleCarMake = event => {\n    setCarMake(event.target.value);\n  };\n\n  const handleCarColor = event => {\n    setCarColor(event.target.value);\n  };\n\n  const handleCarOwner = event => {\n    setCarOwner(event.target.value);\n  };\n\n  const handleCarInsurance = event => {\n    setCarInsurance(event.target.value);\n  };\n\n  const handleSubmit = async function () {\n    try {\n      if (typeof window.AlgoSigner !== 'undefined') {\n        console.log(\"algosigner installed\");\n      } else {\n        console.log(\"algosigner not installed\");\n      }\n\n      window.AlgoSigner.connect().then(d => {\n        console.log(\"Connect\");\n      }).catch(e => {\n        console.error(e);\n      });\n      getTestNetPrimaryAccount(); // get node suggested parameters\n\n      await optIn();\n      let params = await algodClient.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true;\n      let appArg = [];\n      appArg.push(new Uint8Array(Buffer.from(\"createInsurance\")));\n      appArg.push(new Uint8Array(Buffer.from(carInsurance)));\n      let appArr = [25532407]; // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n      //let state= await client.accountInformation(account.addr).do()\n      //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n\n      let txn_1 = algosdk.makeApplicationNoOpTxn(account.address, params, 25540600, appArg, [carID], appArr);\n      let appArgs = [];\n      appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n      appArgs.push(new Uint8Array(Buffer.from(carMake)));\n      appArgs.push(new Uint8Array(Buffer.from(carModel)));\n      appArgs.push(new Uint8Array(Buffer.from(carColor)));\n      appArgs.push(new Uint8Array(Buffer.from(carID)));\n      let txn_2 = algosdk.makeApplicationNoOpTxn(account.address, params, 25532407, appArgs);\n      let txns = [];\n      txns.push(txn_2);\n      txns.push(txn_1);\n      let txgroup = algosdk.assignGroupID(txns);\n      let signed = [];\n      let base64Tx_O = window.AlgoSigner.encoding.msgpackToBase64(txgroup[0].toByte());\n      let base64Tx_1 = window.AlgoSigner.encoding.msgpackToBase64(txgroup[1].toByte());\n      let signedTxs_0 = await window.AlgoSigner.signTxn([{\n        txn: base64Tx_O\n      }]);\n      let signedTxs_1 = await window.AlgoSigner.signTxn([{\n        txn: base64Tx_1\n      }]);\n      signed.push(window.AlgoSigner.encoding.base64ToMsgpack(signedTxs_0[0].blob));\n      signed.push(window.AlgoSigner.encoding.base64ToMsgpack(signedTxs_1[0].blob));\n      let tx = await algodClient.sendRawTransaction(signed).do();\n      console.log(\"Transaction : \" + tx.txId);\n      await waitForConfirmation(algodClient, tx.txId);\n    } catch (error) {\n      console.log(`Failed: AddCar - ${error}`);\n      return 0;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Make\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarMake\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Model\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Color\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Production Year\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarOwner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Insurance\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarInsurance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddCar, \"mBhjmDLvjqHGeks3J575yGNo4co=\", false, function () {\n  return [useStyles];\n});\n\n_c = AddCar;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCar\");","map":{"version":3,"sources":["/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCarWithInsurance.js"],"names":["React","makeStyles","InputAdornment","TextField","Button","algosdk","require","account","algodAddress","algodToken","algodPort","stateless_acc_addr","algodClient","Algodv2","check","healthCheck","do","console","log","useStyles","theme","margin","spacing","waitForConfirmation","algodclient","txId","status","lastRound","pendingInfo","pendingTransactionInformation","statusAfterBlock","getTestNetPrimaryAccount","window","AlgoSigner","accounts","ledger","then","d","length","JSON","stringify","catch","e","payment","to","amount","client","connect","error","params","getTransactionParams","fee","flatFee","closeToRemaninder","undefined","note","txn","makePaymentTxnWithSuggestedParams","address","txID","toString","base64Tx","encoding","msgpackToBase64","toByte","signedTxs","signTxn","signedTxn","base64ToMsgpack","blob","sendRawTransaction","transactionResponse","optIn","rand","Math","floor","random","data","results","compile","hash","result","program","Uint8Array","Buffer","from","lsig","makeLogicSig","sender","txn_1","makeApplicationOptInTxn","txn_2","txns","txgroup","assignGroupID","rawSignedTxn_1","signLogicSigTransactionObject","rawSignedTxn_2","signedTxns","tx","AddCar","classes","carID","setCarID","useState","carMake","setCarMake","carModel","setCarModel","carColor","setCarColor","carOwner","setCarOwner","carInsurance","setCarInsurance","handleCarID","event","target","value","handleCarModel","handleCarMake","handleCarColor","handleCarOwner","handleCarInsurance","handleSubmit","appArg","push","appArr","makeApplicationNoOpTxn","appArgs","signed","base64Tx_O","base64Tx_1","signedTxs_0","signedTxs_1","startAdornment"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nconst algosdk = require('algosdk');\nlet account;\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\nlet stateless_acc_addr;\n\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\n\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\nconst waitForConfirmation = async function (algodclient, txId) {\n    let status = (await algodclient.status().do());\n    let lastRound = status[\"last-round\"];\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n        lastRound++;\n        await algodclient.statusAfterBlock(lastRound).do();\n      }\n    };\n\n    async function getTestNetPrimaryAccount(){\n        await window.AlgoSigner.accounts({ledger: 'TestNet'})\n        .then((d) => {\n            if(d && d.length > 0){\n                console.log(`Account found: ${JSON.stringify(d[0])}`);\n                account = d[0];\n            }\n            else{\n                throw('Primary test account not found in AlgoSigner.');\n            }\n        })\n        .catch((e) => {\n            console.log(JSON.stringify(e),'bad');\n        });\n    }\n\n    async function payment(to, amount, client){\n        try{\n        window.AlgoSigner.connect()\n          .then((d) => {\n            console.log(\"Connect\")\n          })\n          .catch((e) => {\n            console.error(e);\n          });\n        getTestNetPrimaryAccount();\n        // get node suggested parameters\n        let params = await client.getTransactionParams().do();\n        // comment out the next two lines to use suggested fee\n        params.fee = 1000;\n        params.flatFee = true;\n    \n        // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n        //let state= await client.accountInformation(account.addr).do()\n        //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n        const closeToRemaninder = undefined;\n        const note = undefined;\n        let txn = algosdk.makePaymentTxnWithSuggestedParams(account.address, to, amount, closeToRemaninder, note, params);\n        let txId = txn.txID().toString();\n        let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n    \n        let signedTxs = await window.AlgoSigner.signTxn([\n         {\n            txn: base64Tx,\n         },\n        ]);\n    \n        // Get the base64 encoded signed transaction and convert it to binary\n       let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);    \n        // Sign the transaction\n        console.log(\"Signed transaction with txID: %s\", txId);\n    \n        // Submit the transaction\n        await client.sendRawTransaction(signedTxn).do();\n    \n        // Wait for confirmation\n        await waitForConfirmation(client, txId);\n    \n        // display results\n        let transactionResponse = await client.pendingTransactionInformation(txId).do();\n        console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n        if (transactionResponse['global-state-delta'] !== undefined ) {\n            console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n        }\n        if (transactionResponse['local-state-delta'] !== undefined ) {\n            console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n        }\n        }catch(error){\n            console.log(`Failed: Payment: - ${error}`);\n            return 0;\n        }\n    \n    }\n    async function optIn(){\n        try{\n             // get suggested parameters\n        const params = await algodClient.getTransactionParams().do();\n        // comment out the next two lines to use suggested fee\n        params.fee = 1000;\n        params.flatFee = true;\n    \n        let rand =Math.floor(Math.random() * 2**64);\n        const data = \"#pragma version 4\\n\" + \"int \"+rand.toString()+\"\\nint \"+rand.toString()+\"\\n>\\nbz success\\nint 1\\nreturn\\nsuccess:\\nint 1\\nreturn\";\n        console.log(data);\n        const  results = await algodClient.compile(data).do();\n        console.log(\"Hash = \" + results.hash);\n        console.log(\"Result = \" + results.result);\n    \n        const program = new Uint8Array(Buffer.from(results.result, \"base64\"));\n        \n        const lsig = algosdk.makeLogicSig(program);\n        console.log(\"lsig : \" + lsig.address());   \n    \n        // create a transaction\n        const sender = lsig.address();\n        await payment(sender, 1000000, algodClient);\n        stateless_acc_addr = sender;\n    \n        const txn_1 = algosdk.makeApplicationOptInTxn(sender, params, 25540600);\n        const txn_2 = algosdk.makeApplicationOptInTxn(sender, params, 25532407);\n        let txns = [txn_1, txn_2];\n        let txgroup = algosdk.assignGroupID(txns);\n        const rawSignedTxn_1 = algosdk.signLogicSigTransactionObject(txgroup[0], lsig);\n        const rawSignedTxn_2 = algosdk.signLogicSigTransactionObject(txgroup[1], lsig);\n        let signedTxns = [rawSignedTxn_1, rawSignedTxn_2];\n        // send raw LogicSigTransaction to network\n        const tx = await algodClient.sendRawTransaction(signedTxns).do();\n        console.log(\"Transaction : \" + tx.txId);   \n        await waitForConfirmation(algodClient, tx.txId);\n        return lsig.address();\n        }catch(error){\n            console.log(\"OptIn: \"+error);\n        }\n    }\n\nexport default function AddCar() {\n    const classes = useStyles();\n\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [carMake, setCarMake] = React.useState('')\n    const [carModel, setCarModel] = React.useState('')\n    const [carColor, setCarColor] = React.useState('')\n    const [carOwner, setCarOwner] = React.useState('')\n    const [carInsurance, setCarInsurance] = React.useState('')\n\n    //Handlers\n    const handleCarID = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleCarModel = (event) => {\n        setCarModel(event.target.value)\n    }\n\n    const handleCarMake = (event) => {\n        setCarMake(event.target.value)\n    }\n\n    const handleCarColor = (event) => {\n        setCarColor(event.target.value)\n    }\n\n    const handleCarOwner = (event) => {\n        setCarOwner(event.target.value)\n    }\n\n    const handleCarInsurance = (event) => {\n        setCarInsurance(event.target.value)\n    }\n\n   const handleSubmit = async function () {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            await optIn();\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArg = [];\n            appArg.push(new Uint8Array(Buffer.from(\"createInsurance\")));\n            appArg.push(new Uint8Array(Buffer.from(carInsurance)));\n            let appArr = [25532407]\n            // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n            //let state= await client.accountInformation(account.addr).do()\n            //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n            let txn_1 = algosdk.makeApplicationNoOpTxn(account.address, params, 25540600, appArg,[carID],appArr);\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n            appArgs.push(new Uint8Array(Buffer.from(carMake)));\n            appArgs.push(new Uint8Array(Buffer.from(carModel)));\n            appArgs.push(new Uint8Array(Buffer.from(carColor)));\n            appArgs.push(new Uint8Array(Buffer.from(carID)));\n            let txn_2 = algosdk.makeApplicationNoOpTxn(account.address, params, 25532407, appArgs);\n            let txns = []\n            txns.push(txn_2);\n            txns.push(txn_1);\n            let txgroup = algosdk.assignGroupID(txns);\n            let signed =[]\n            let base64Tx_O = window.AlgoSigner.encoding.msgpackToBase64(txgroup[0].toByte());\n            let base64Tx_1 = window.AlgoSigner.encoding.msgpackToBase64(txgroup[1].toByte());\n            let signedTxs_0 = await window.AlgoSigner.signTxn([\n                {\n                   txn: base64Tx_O,\n                }]);\n            let signedTxs_1 = await window.AlgoSigner.signTxn([\n                {\n                   txn: base64Tx_1,\n                }]);\n            signed.push(window.AlgoSigner.encoding.base64ToMsgpack(signedTxs_0[0].blob)); \n            signed.push(window.AlgoSigner.encoding.base64ToMsgpack(signedTxs_1[0].blob));  \n            let tx = (await algodClient.sendRawTransaction(signed).do());\n            console.log(\"Transaction : \" + tx.txId);\n            await waitForConfirmation(algodClient, tx.txId)\n        }catch(error){\n            console.log(`Failed: AddCar - ${error}`);\n            return 0;\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Make\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarMake}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Model\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarModel}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Color\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarColor}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Production Year\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarOwner}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Insurance\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarInsurance}\n            />\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}