{"ast":null,"code":"var _jsxFileName = \"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst algosdk = require('algosdk');\n\nconst crypto = require('crypto');\n\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort = \"\";\nlet account;\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\nlet stateless_acc_addr;\nvar check = algodClient.healthCheck().do();\n\nif (check) {\n  console.log(\"client connected\");\n}\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n}));\n\nfunction hashPassPhrase(passPhrase) {\n  const hash = crypto.createHash('sha256');\n  hash.update(passPhrase);\n  return hash.digest('hex');\n} // helper function to await transaction confirmation\n// Function used to wait for a tx confirmation\n\n\nconst waitForConfirmation = async function (algodclient, txId) {\n  let status = await algodclient.status().do();\n  let lastRound = status[\"last-round\"];\n\n  while (true) {\n    const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n    if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n      //Got the completed Transaction\n      console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n      break;\n    }\n\n    lastRound++;\n    await algodclient.statusAfterBlock(lastRound).do();\n  }\n};\n\nasync function getTestNetPrimaryAccount() {\n  window.AlgoSigner.connect().then(d => {\n    console.log(\"Connect\");\n  }).catch(e => {\n    console.error(e);\n  });\n  await window.AlgoSigner.accounts({\n    ledger: 'TestNet'\n  }).then(d => {\n    if (d && d.length > 0) {\n      console.log(`Account found: ${JSON.stringify(d[0])}`);\n      account = d[0];\n    } else {\n      throw 'Primary test account not found in AlgoSigner.';\n    }\n  }).catch(e => {\n    console.log(JSON.stringify(e), 'bad');\n  });\n} // call application \n\n\nasync function callApp(client, index, appArgs, accounts) {\n  // define sender\n  try {\n    if (typeof window.AlgoSigner !== 'undefined') {\n      console.log(\"algosigner installed\");\n    } else {\n      console.log(\"algosigner not installed\");\n    }\n\n    window.AlgoSigner.connect().then(d => {\n      console.log(\"Connect\");\n    }).catch(e => {\n      console.error(e);\n    });\n    getTestNetPrimaryAccount(); // get node suggested parameters\n\n    let params = await client.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true; // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n    //let state= await client.accountInformation(account.addr).do()\n    //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n\n    let txn = algosdk.makeApplicationNoOpTxn(account.address, params, index, appArgs, accounts);\n    let txId = txn.txID().toString();\n    let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n    let signedTxs = await window.AlgoSigner.signTxn([{\n      txn: base64Tx\n    }]); // Get the base64 encoded signed transaction and convert it to binary\n\n    let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); // Sign the transaction\n\n    console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n    await client.sendRawTransaction(signedTxn).do(); // Wait for confirmation\n\n    await waitForConfirmation(client, txId); // display results\n\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    console.log(\"Called app-id:\", transactionResponse['txn']['txn']['apid']);\n\n    if (transactionResponse['global-state-delta'] !== undefined) {\n      console.log(\"Global State updated:\", transactionResponse['global-state-delta']);\n    }\n\n    if (transactionResponse['local-state-delta'] !== undefined) {\n      console.log(\"Local State updated:\", transactionResponse['local-state-delta']);\n    }\n  } catch (error) {\n    console.log(`Failed: AddCar - ${error}`);\n    return 0;\n  }\n}\n\nasync function payment(to, amount, client) {\n  try {\n    window.AlgoSigner.connect().then(d => {\n      console.log(\"Connect\");\n    }).catch(e => {\n      console.error(e);\n    });\n    getTestNetPrimaryAccount(); // get node suggested parameters\n\n    let params = await client.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true; // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n    //let state= await client.accountInformation(account.addr).do()\n    //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n\n    const closeToRemaninder = undefined;\n    const note = undefined;\n    let txn = algosdk.makePaymentTxnWithSuggestedParams(account.address, to, amount, closeToRemaninder, note, params);\n    let txId = txn.txID().toString();\n    let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n    let signedTxs = await window.AlgoSigner.signTxn([{\n      txn: base64Tx\n    }]); // Get the base64 encoded signed transaction and convert it to binary\n\n    let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); // Sign the transaction\n\n    console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n    await client.sendRawTransaction(signedTxn).do(); // Wait for confirmation\n\n    await waitForConfirmation(client, txId); // display results\n\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    console.log(\"Called app-id:\", transactionResponse['txn']['txn']['apid']);\n\n    if (transactionResponse['global-state-delta'] !== undefined) {\n      console.log(\"Global State updated:\", transactionResponse['global-state-delta']);\n    }\n\n    if (transactionResponse['local-state-delta'] !== undefined) {\n      console.log(\"Local State updated:\", transactionResponse['local-state-delta']);\n    }\n  } catch (error) {\n    console.log(`Failed: Payment: - ${error}`);\n    return 0;\n  }\n}\n\nasync function optIn() {\n  try {\n    // get suggested parameters\n    const params = await algodClient.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true;\n    let rand = Math.floor(Math.random() * 2 ** 64);\n    const data = \"#pragma version 4\\n\" + \"int \" + rand.toString() + \"\\nint \" + rand.toString() + \"\\n>\\nbz success\\nint 1\\nreturn\\nsuccess:\\nint 1\\nreturn\";\n    console.log(data);\n    const results = await algodClient.compile(data).do();\n    console.log(\"Hash = \" + results.hash);\n    console.log(\"Result = \" + results.result);\n    const program = new Uint8Array(Buffer.from(results.result, \"base64\"));\n    const lsig = algosdk.makeLogicSig(program);\n    console.log(\"lsig : \" + lsig.address()); // create a transaction\n\n    const sender = lsig.address();\n    await payment(sender, 600000, algodClient);\n    stateless_acc_addr = sender;\n    const appIndex = 25515709;\n    const txn = algosdk.makeApplicationOptInTxn(sender, params, appIndex);\n    const rawSignedTxn = algosdk.signLogicSigTransactionObject(txn, lsig); // send raw LogicSigTransaction to network\n\n    const tx = await algodClient.sendRawTransaction(rawSignedTxn.blob).do();\n    console.log(\"Transaction : \" + tx.txId);\n    return lsig.address();\n    await waitForConfirmation(algodClient, tx.txId);\n  } catch (error) {\n    console.log(\"OptIn: \" + error);\n  }\n}\n\nexport default function AddCar() {\n  _s();\n\n  const classes = useStyles(); //States\n\n  const [carID, setCarID] = React.useState('');\n  const [carMake, setCarMake] = React.useState('');\n  const [carModel, setCarModel] = React.useState('');\n  const [carColor, setCarColor] = React.useState(''); //Handlers\n\n  const handleProdYear = event => {\n    setCarID(event.target.value);\n  };\n\n  const handleCarModel = event => {\n    setCarModel(event.target.value);\n  };\n\n  const handleCarMake = event => {\n    setCarMake(event.target.value);\n  };\n\n  const handleCarColor = event => {\n    setCarColor(event.target.value);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      let appArgs = [];\n      appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n      appArgs.push(new Uint8Array(Buffer.from(carID)));\n      appArgs.push(new Uint8Array(Buffer.from(carMake)));\n      appArgs.push(new Uint8Array(Buffer.from(carModel)));\n      appArgs.push(new Uint8Array(Buffer.from(carColor)));\n      await optIn();\n      let createCarEvent = await callApp(algodClient, 25515709, appArgs, [stateless_acc_addr]);\n    } catch (error) {\n      console.error(`AddCar- Failed to evaluate transaction: ${error}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Make\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarMake\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Model\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Car Color\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Production Year\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleProdYear\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddCar, \"6EBnyvQ/lOQzKn9T9gERXcs1Zho=\", false, function () {\n  return [useStyles];\n});\n\n_c = AddCar;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCar\");","map":{"version":3,"sources":["/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCar.js"],"names":["React","makeStyles","InputAdornment","TextField","Button","algosdk","require","crypto","algodAddress","algodToken","algodPort","account","algodClient","Algodv2","stateless_acc_addr","check","healthCheck","do","console","log","useStyles","theme","margin","spacing","hashPassPhrase","passPhrase","hash","createHash","update","digest","waitForConfirmation","algodclient","txId","status","lastRound","pendingInfo","pendingTransactionInformation","statusAfterBlock","getTestNetPrimaryAccount","window","AlgoSigner","connect","then","d","catch","e","error","accounts","ledger","length","JSON","stringify","callApp","client","index","appArgs","params","getTransactionParams","fee","flatFee","txn","makeApplicationNoOpTxn","address","txID","toString","base64Tx","encoding","msgpackToBase64","toByte","signedTxs","signTxn","signedTxn","base64ToMsgpack","blob","sendRawTransaction","transactionResponse","undefined","payment","to","amount","closeToRemaninder","note","makePaymentTxnWithSuggestedParams","optIn","rand","Math","floor","random","data","results","compile","result","program","Uint8Array","Buffer","from","lsig","makeLogicSig","sender","appIndex","makeApplicationOptInTxn","rawSignedTxn","signLogicSigTransactionObject","tx","AddCar","classes","carID","setCarID","useState","carMake","setCarMake","carModel","setCarModel","carColor","setCarColor","handleProdYear","event","target","value","handleCarModel","handleCarMake","handleCarColor","handleSubmit","push","createCarEvent","startAdornment"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nconst algosdk = require('algosdk');\nconst crypto = require('crypto');\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\nlet account;\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\n\nlet stateless_acc_addr;\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\nfunction hashPassPhrase(passPhrase) {\n    const hash = crypto.createHash('sha256')\n    hash.update(passPhrase)\n    return hash.digest('hex')\n}\n\n// helper function to await transaction confirmation\n// Function used to wait for a tx confirmation\nconst waitForConfirmation = async function (algodclient, txId) {\n    let status = (await algodclient.status().do());\n    let lastRound = status[\"last-round\"];\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n        lastRound++;\n        await algodclient.statusAfterBlock(lastRound).do();\n      }\n    };\n\nasync function getTestNetPrimaryAccount(){\n        window.AlgoSigner.connect()\n        .then((d) => {\n          console.log(\"Connect\")\n        })\n        .catch((e) => {\n          console.error(e);\n        });\n        await window.AlgoSigner.accounts({ledger: 'TestNet'})\n        .then((d) => {\n            if(d && d.length > 0){\n                console.log(`Account found: ${JSON.stringify(d[0])}`);\n                account = d[0];\n            }\n            else{\n                throw('Primary test account not found in AlgoSigner.');\n            }\n        })\n        .catch((e) => {\n            console.log(JSON.stringify(e),'bad');\n        });\n}\n// call application \nasync function callApp(client, index, appArgs,accounts) {\n    // define sender\n   try{\n    if (typeof window.AlgoSigner !== 'undefined') {\n        console.log(\"algosigner installed\");\n      } else {\n        console.log(\"algosigner not installed\");\n      }\n      window.AlgoSigner.connect()\n      .then((d) => {\n        console.log(\"Connect\")\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n    getTestNetPrimaryAccount();\n    // get node suggested parameters\n    let params = await client.getTransactionParams().do();\n    // comment out the next two lines to use suggested fee\n    params.fee = 1000;\n    params.flatFee = true;\n\n    // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n    //let state= await client.accountInformation(account.addr).do()\n    //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n    let txn = algosdk.makeApplicationNoOpTxn(account.address, params, index, appArgs, accounts);\n    let txId = txn.txID().toString();\n    let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n    let signedTxs = await window.AlgoSigner.signTxn([\n     {\n        txn: base64Tx,\n     },\n    ]);\n\n    // Get the base64 encoded signed transaction and convert it to binary\n   let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);    \n    // Sign the transaction\n    console.log(\"Signed transaction with txID: %s\", txId);\n\n    // Submit the transaction\n    await client.sendRawTransaction(signedTxn).do();\n\n    // Wait for confirmation\n    await waitForConfirmation(client, txId);\n\n    // display results\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n    if (transactionResponse['global-state-delta'] !== undefined ) {\n        console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n    }\n    if (transactionResponse['local-state-delta'] !== undefined ) {\n        console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n    }\n    }catch(error){\n        console.log(`Failed: AddCar - ${error}`);\n        return 0;\n    }\n}\n\nasync function payment(to, amount, client){\n    try{\n    window.AlgoSigner.connect()\n      .then((d) => {\n        console.log(\"Connect\")\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n    getTestNetPrimaryAccount();\n    // get node suggested parameters\n    let params = await client.getTransactionParams().do();\n    // comment out the next two lines to use suggested fee\n    params.fee = 1000;\n    params.flatFee = true;\n\n    // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n    //let state= await client.accountInformation(account.addr).do()\n    //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n    const closeToRemaninder = undefined;\n    const note = undefined;\n    let txn = algosdk.makePaymentTxnWithSuggestedParams(account.address, to, amount, closeToRemaninder, note, params);\n    let txId = txn.txID().toString();\n    let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n    let signedTxs = await window.AlgoSigner.signTxn([\n     {\n        txn: base64Tx,\n     },\n    ]);\n\n    // Get the base64 encoded signed transaction and convert it to binary\n   let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);    \n    // Sign the transaction\n    console.log(\"Signed transaction with txID: %s\", txId);\n\n    // Submit the transaction\n    await client.sendRawTransaction(signedTxn).do();\n\n    // Wait for confirmation\n    await waitForConfirmation(client, txId);\n\n    // display results\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n    if (transactionResponse['global-state-delta'] !== undefined ) {\n        console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n    }\n    if (transactionResponse['local-state-delta'] !== undefined ) {\n        console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n    }\n    }catch(error){\n        console.log(`Failed: Payment: - ${error}`);\n        return 0;\n    }\n\n}\nasync function optIn(){\n    try{\n         // get suggested parameters\n    const params = await algodClient.getTransactionParams().do();\n    // comment out the next two lines to use suggested fee\n    params.fee = 1000;\n    params.flatFee = true;\n\n    let rand =Math.floor(Math.random() * 2**64);\n    const data = \"#pragma version 4\\n\" + \"int \"+rand.toString()+\"\\nint \"+rand.toString()+\"\\n>\\nbz success\\nint 1\\nreturn\\nsuccess:\\nint 1\\nreturn\";\n    console.log(data);\n    const  results = await algodClient.compile(data).do();\n    console.log(\"Hash = \" + results.hash);\n    console.log(\"Result = \" + results.result);\n\n    const program = new Uint8Array(Buffer.from(results.result, \"base64\"));\n    \n    const lsig = algosdk.makeLogicSig(program);\n    console.log(\"lsig : \" + lsig.address());   \n\n    // create a transaction\n    const sender = lsig.address();\n    await payment(sender, 600000, algodClient);\n    stateless_acc_addr = sender;\n    const appIndex = 25515709;\n\n    const txn = algosdk.makeApplicationOptInTxn(sender, params, appIndex);\n\n    const rawSignedTxn = algosdk.signLogicSigTransactionObject(txn, lsig);\n\n    // send raw LogicSigTransaction to network\n    const tx = await algodClient.sendRawTransaction(rawSignedTxn.blob).do();\n    console.log(\"Transaction : \" + tx.txId);   \n    return lsig.address();\n    await waitForConfirmation(algodClient, tx.txId);\n    }catch(error){\n        console.log(\"OptIn: \"+error);\n    }\n}\n\n\n    \nexport default function AddCar() {\n    const classes = useStyles();\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [carMake, setCarMake] = React.useState('')\n    const [carModel, setCarModel] = React.useState('')\n    const [carColor, setCarColor] = React.useState('')\n\n    //Handlers\n    const handleProdYear = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleCarModel = (event) => {\n        setCarModel(event.target.value)\n    }\n\n    const handleCarMake = (event) => {\n        setCarMake(event.target.value)\n    }\n\n    const handleCarColor = (event) => {\n        setCarColor(event.target.value)\n    }\n\n    const handleSubmit = async () => {\n        try{\n        let appArgs = [];\n        appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n        appArgs.push(new Uint8Array(Buffer.from(carID)));\n        appArgs.push(new Uint8Array(Buffer.from(carMake)));\n        appArgs.push(new Uint8Array(Buffer.from(carModel)));\n        appArgs.push(new Uint8Array(Buffer.from(carColor)));\n        await optIn();\n        let createCarEvent = await callApp(algodClient, 25515709, appArgs, [stateless_acc_addr]);\n        \n        }catch(error){\n            console.error(`AddCar- Failed to evaluate transaction: ${error}`);\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Make\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarMake}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Model\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarModel}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Color\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarColor}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Production Year\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleProdYear}\n            />\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}