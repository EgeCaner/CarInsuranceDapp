{"ast":null,"code":"var _jsxFileName = \"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allCars.js\";\nimport React, { Component } from 'react';\nimport Cards from '../components/cards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst algosdk = require('algosdk');\n\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\nlet car_app_id = 25532407;\n\nclass allCars extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      carList: []\n    };\n  }\n\n  async getAllCars() {\n    let data = [];\n\n    try {\n      let accountInfo = await indexerClient.searchAccounts().applicationID(car_app_id).do();\n\n      for (let i = 0; i < accountInfo.accounts.length; i++) {\n        let Key = accountInfo.accounts[i].address;\n\n        for (let j = 0; j < accountInfo.accounts[i]['apps-local-state'].length; j++) {\n          if (accountInfo.accounts[i]['apps-local-state'][j].id == car_app_id) {\n            let temp = accountInfo.accounts[i]['apps-local-state'][j]['key-value'];\n\n            if (temp != null && temp.length > 2) {\n              let make;\n              let color;\n              let model;\n              let owner;\n              let year;\n\n              for (let k = 0; k < array.length; k++) {\n                Buffer(temp[k].value.bytes, 'base64').toString('ascii') == \"CarManufacturer\" ? make = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : Buffer(temp[k].value.bytes, 'base64').toString('ascii') == \"CarColor\" ? color = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : Buffer(temp[k].value.bytes, 'base64').toString('ascii') == \"CarModel\" ? model = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : Buffer(temp[k].value.bytes, 'base64').toString('ascii') == \"ProdYear\" ? year = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : Buffer(temp[k].value.bytes, 'base64').toString('ascii') == \"Owner\" ? owner = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : console.log(\"AllCarsEmptyEntity\");\n                data.push({\n                  Key: Key,\n                  Record: {\n                    owner: owner,\n                    make: make,\n                    model: model,\n                    color: color\n                  }\n                });\n              }\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.log(\"GetAllInsurance ---->\" + error);\n    }\n\n    this.setState({\n      carList: data\n    });\n  }\n\n  componentDidMount() {\n    this.getAllCars();\n  }\n\n  render() {\n    console.log(this.state.carList);\n    return /*#__PURE__*/_jsxDEV(Cards, {\n      carList: this.state.carList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default allCars;","map":{"version":3,"sources":["/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allCars.js"],"names":["React","Component","Cards","algosdk","require","indexer_token","indexer_server","indexer_port","indexerClient","Indexer","car_app_id","allCars","state","carList","getAllCars","data","accountInfo","searchAccounts","applicationID","do","i","accounts","length","Key","address","j","id","temp","make","color","model","owner","year","k","array","Buffer","value","bytes","toString","console","log","push","Record","error","setState","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Cards from '../components/cards';\n\nconst algosdk = require('algosdk');\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\n\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\nlet car_app_id = 25532407;\nclass allCars extends Component {\n\n    state = {\n        carList: []\n    }\n\n    \n   async getAllCars(){\n        let data = [];\n        try{\n            let accountInfo = await indexerClient.searchAccounts()\n                    .applicationID(car_app_id).do();\n            for (let i = 0; i < accountInfo.accounts.length; i++) {\n                let Key = accountInfo.accounts[i].address;\n                for (let j = 0; j < accountInfo.accounts[i]['apps-local-state'].length; j++) {\n                    if(accountInfo.accounts[i]['apps-local-state'][j].id == car_app_id){\n                        let temp =accountInfo.accounts[i]['apps-local-state'][j]['key-value'];\n                        if(temp != null && temp.length > 2){\n                            let make;\n                            let color;\n                            let model;\n                            let owner;\n                            let year;\n                            for (let k = 0; k < array.length; k++) {                                  \n                                (Buffer(temp[k].value.bytes, 'base64').toString('ascii') == \"CarManufacturer\" ? make = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : Buffer(temp[k].value.bytes, 'base64').toString('ascii') == \"CarColor\" ? color = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : Buffer(temp[k].value.bytes, 'base64').toString('ascii') == \"CarModel\" ? model = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : Buffer(temp[k].value.bytes, 'base64').toString('ascii') == \"ProdYear\" ? year = Buffer(temp[k].value.bytes, 'base64').toString('ascii'):Buffer(temp[k].value.bytes, 'base64').toString('ascii') == \"Owner\" ? owner = Buffer(temp[k].value.bytes, 'base64').toString('ascii'): console.log(\"AllCarsEmptyEntity\"));      \n                                data.push({Key:Key,Record:{owner:owner , make:make, model:model, color:color}});       \n                            }                   \n                        }\n                    }   \n                }\n            }     \n        } catch (error) {\n            console.log(\"GetAllInsurance ---->\" + error);\n        }\n        this.setState({carList: data});\n    }\n\n    componentDidMount(){    \n        this.getAllCars()\n    }\n\n    render() {\n        console.log(this.state.carList)\n        return (\n            <Cards carList={this.state.carList} />\n        );\n    }\n}\n\nexport default allCars;"]},"metadata":{},"sourceType":"module"}