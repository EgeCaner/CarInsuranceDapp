{"ast":null,"code":"var _jsxFileName = \"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allCars.js\";\nimport React, { Component } from 'react';\nimport Cards from '../components/cards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst algosdk = require('algosdk');\n\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\nlet car_app_id = 25532407;\n\nclass allCars extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      carList: []\n    };\n  }\n\n  async getAllCars() {\n    let data = [];\n\n    try {\n      let accountInfo = await indexerClient.searchAccounts().applicationID(car_app_id).do();\n\n      for (let i = 0; i < accountInfo.accounts.length; i++) {\n        let Key = accountInfo.accounts[i].address;\n\n        for (let j = 0; j < accountInfo.accounts[i]['apps-local-state'].length; j++) {\n          if (accountInfo.accounts[i]['apps-local-state'][j].id == car_app_id) {\n            let temp = accountInfo.accounts[i]['apps-local-state'][j]['key-value'];\n\n            if (temp != null && temp.length > 2) {\n              for (let index = 0; index < array.length; index++) {\n                const element = array[index];\n                let color = Buffer(temp[0].value.bytes, 'base64').toString('ascii');\n                let make = Buffer(temp[1].value.bytes, 'base64').toString('ascii');\n                let model = Buffer(temp[2].value.bytes, 'base64').toString('ascii');\n                let owner = Buffer(temp[4].value.bytes, 'base64').toString('ascii');\n                data.push({\n                  Key: Key,\n                  Record: {\n                    owner: owner,\n                    make: make,\n                    model: model,\n                    color: color\n                  }\n                });\n              }\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.log(\"GetAllInsurance ---->\" + error);\n    }\n\n    this.setState({\n      carList: data\n    });\n  }\n\n  componentDidMount() {\n    this.getAllCars();\n  }\n\n  render() {\n    console.log(this.state.carList);\n    return /*#__PURE__*/_jsxDEV(Cards, {\n      carList: this.state.carList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default allCars;","map":{"version":3,"sources":["/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allCars.js"],"names":["React","Component","Cards","algosdk","require","indexer_token","indexer_server","indexer_port","indexerClient","Indexer","car_app_id","allCars","state","carList","getAllCars","data","accountInfo","searchAccounts","applicationID","do","i","accounts","length","Key","address","j","id","temp","index","array","element","color","Buffer","value","bytes","toString","make","model","owner","push","Record","error","console","log","setState","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,cAAc,GAAG,0CAAvB;AACA,MAAMC,YAAY,GAAG,CAArB;AAEA,IAAIC,aAAa,GAAG,IAAIL,OAAO,CAACM,OAAZ,CAAoBJ,aAApB,EAAmCC,cAAnC,EAAmDC,YAAnD,CAApB;AACA,IAAIG,UAAU,GAAG,QAAjB;;AACA,MAAMC,OAAN,SAAsBV,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAE5BW,KAF4B,GAEpB;AACJC,MAAAA,OAAO,EAAE;AADL,KAFoB;AAAA;;AAOb,QAAVC,UAAU,GAAE;AACb,QAAIC,IAAI,GAAG,EAAX;;AACA,QAAG;AACC,UAAIC,WAAW,GAAG,MAAMR,aAAa,CAACS,cAAd,GACfC,aADe,CACDR,UADC,EACWS,EADX,EAAxB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACK,QAAZ,CAAqBC,MAAzC,EAAiDF,CAAC,EAAlD,EAAsD;AAClD,YAAIG,GAAG,GAAGP,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwBI,OAAlC;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CE,MAAhE,EAAwEG,CAAC,EAAzE,EAA6E;AACzE,cAAGT,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CK,CAA5C,EAA+CC,EAA/C,IAAqDhB,UAAxD,EAAmE;AAC/D,gBAAIiB,IAAI,GAAEX,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CK,CAA5C,EAA+C,WAA/C,CAAV;;AACA,gBAAGE,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACL,MAAL,GAAc,CAAjC,EAAmC;AAC/B,mBAAK,IAAIM,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGC,KAAK,CAACP,MAAlC,EAA0CM,KAAK,EAA/C,EAAmD;AAC/C,sBAAME,OAAO,GAAGD,KAAK,CAACD,KAAD,CAArB;AAGA,oBAAIG,KAAK,GAAEC,MAAM,CAACL,IAAI,CAAC,CAAD,CAAJ,CAAQM,KAAR,CAAcC,KAAf,EAAsB,QAAtB,CAAN,CAAsCC,QAAtC,CAA+C,OAA/C,CAAX;AACA,oBAAIC,IAAI,GAAEJ,MAAM,CAACL,IAAI,CAAC,CAAD,CAAJ,CAAQM,KAAR,CAAcC,KAAf,EAAsB,QAAtB,CAAN,CAAsCC,QAAtC,CAA+C,OAA/C,CAAV;AACA,oBAAIE,KAAK,GAAEL,MAAM,CAACL,IAAI,CAAC,CAAD,CAAJ,CAAQM,KAAR,CAAcC,KAAf,EAAsB,QAAtB,CAAN,CAAsCC,QAAtC,CAA+C,OAA/C,CAAX;AACA,oBAAIG,KAAK,GAAEN,MAAM,CAACL,IAAI,CAAC,CAAD,CAAJ,CAAQM,KAAR,CAAcC,KAAf,EAAsB,QAAtB,CAAN,CAAsCC,QAAtC,CAA+C,OAA/C,CAAX;AACApB,gBAAAA,IAAI,CAACwB,IAAL,CAAU;AAAChB,kBAAAA,GAAG,EAACA,GAAL;AAASiB,kBAAAA,MAAM,EAAC;AAACF,oBAAAA,KAAK,EAACA,KAAP;AAAeF,oBAAAA,IAAI,EAACA,IAApB;AAA0BC,oBAAAA,KAAK,EAACA,KAAhC;AAAuCN,oBAAAA,KAAK,EAACA;AAA7C;AAAhB,iBAAV;AACH;AACJ;AACJ;AACJ;AACJ;AACJ,KAvBD,CAuBE,OAAOU,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BF,KAAtC;AACH;;AACD,SAAKG,QAAL,CAAc;AAAC/B,MAAAA,OAAO,EAAEE;AAAV,KAAd;AACH;;AAED8B,EAAAA,iBAAiB,GAAE;AACf,SAAK/B,UAAL;AACH;;AAEDgC,EAAAA,MAAM,GAAG;AACLJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK/B,KAAL,CAAWC,OAAvB;AACA,wBACI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC;AAA3B;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AA/C2B;;AAkDhC,eAAeF,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport Cards from '../components/cards';\n\nconst algosdk = require('algosdk');\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\n\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\nlet car_app_id = 25532407;\nclass allCars extends Component {\n\n    state = {\n        carList: []\n    }\n\n    \n   async getAllCars(){\n        let data = [];\n        try{\n            let accountInfo = await indexerClient.searchAccounts()\n                    .applicationID(car_app_id).do();\n            for (let i = 0; i < accountInfo.accounts.length; i++) {\n                let Key = accountInfo.accounts[i].address;\n                for (let j = 0; j < accountInfo.accounts[i]['apps-local-state'].length; j++) {\n                    if(accountInfo.accounts[i]['apps-local-state'][j].id == car_app_id){\n                        let temp =accountInfo.accounts[i]['apps-local-state'][j]['key-value'];\n                        if(temp != null && temp.length > 2){\n                            for (let index = 0; index < array.length; index++) {\n                                const element = array[index];\n                                \n                            \n                                let color =Buffer(temp[0].value.bytes, 'base64').toString('ascii');    \n                                let make =Buffer(temp[1].value.bytes, 'base64').toString('ascii');    \n                                let model =Buffer(temp[2].value.bytes, 'base64').toString('ascii');    \n                                let owner =Buffer(temp[4].value.bytes, 'base64').toString('ascii');    \n                                data.push({Key:Key,Record:{owner:owner , make:make, model:model, color:color}});       \n                            }                   \n                        }\n                    }   \n                }\n            }     \n        } catch (error) {\n            console.log(\"GetAllInsurance ---->\" + error);\n        }\n        this.setState({carList: data});\n    }\n\n    componentDidMount(){    \n        this.getAllCars()\n    }\n\n    render() {\n        console.log(this.state.carList)\n        return (\n            <Cards carList={this.state.carList} />\n        );\n    }\n}\n\nexport default allCars;"]},"metadata":{},"sourceType":"module"}