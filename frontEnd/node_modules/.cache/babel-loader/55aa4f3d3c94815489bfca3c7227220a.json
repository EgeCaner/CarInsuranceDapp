{"ast":null,"code":"var _jsxFileName = \"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/allCarInsurances.js\";\nimport React, { Component } from 'react';\nimport Cards from '../components/cards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst algosdk = require('algosdk');\n\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\nlet car_app_id = 25532407;\nlet insurance_app_id = 25540600;\n\nclass allCars extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      carList: []\n    };\n  }\n\n  async getAllCars() {\n    let data = [];\n    let check = false;\n    let accountInfo = await indexerClient.searchAccounts().applicationID(insurance_app_id).do();\n\n    for (let i = 0; i < accountInfo.accounts.length; i++) {\n      let InsuranceID = accountInfo.accounts[i].address;\n\n      for (let j = 0; j < accountInfo.accounts[i]['apps-local-state'].length; j++) {\n        if (accountInfo.accounts[i]['apps-local-state'][j].id == insurance_app_id && accountInfo.accounts[i]['apps-local-state'][j]['key-value'] != null && accountInfo.accounts[i]['apps-local-state'][j]['key-value'].length >= 1) {\n          let acc = Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][0].value.bytes, 'base64').toString('ascii');\n          check = true;\n        }\n\n        if (accountInfo.accounts[i]['apps-local-state'][j].id == car_app_id && accountInfo.accounts[i]['apps-local-state'][j]['key-value'] != null && check && accountInfo.accounts[i]['apps-local-state'][j]['key-value'].length > 2) {\n          let color = Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][0].value.bytes, 'base64').toString('ascii');\n          let make = Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][1].value.bytes, 'base64').toString('ascii');\n          let model = Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][2].value.bytes, 'base64').toString('ascii');\n          let owner = Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][4].value.bytes, 'base64').toString('ascii');\n          data.push({\n            Key: InsuranceID,\n            Record: {\n              owner: owner,\n              make: make,\n              model: model,\n              color: color,\n              insurance: InsuranceID\n            }\n          });\n        }\n      }\n    }\n\n    this.setState({\n      carList: data\n    });\n  }\n\n  componentDidMount() {\n    this.getAllCars();\n  }\n\n  render() {\n    console.log(this.state.carList);\n    return /*#__PURE__*/_jsxDEV(Cards, {\n      carList: this.state.carList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default allCars;","map":{"version":3,"sources":["/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/allCarInsurances.js"],"names":["React","Component","Cards","algosdk","require","indexer_token","indexer_server","indexer_port","indexerClient","Indexer","car_app_id","insurance_app_id","allCars","state","carList","getAllCars","data","check","accountInfo","searchAccounts","applicationID","do","i","accounts","length","InsuranceID","address","j","id","acc","Buffer","value","bytes","toString","color","make","model","owner","push","Key","Record","insurance","setState","componentDidMount","render","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,cAAc,GAAG,0CAAvB;AACA,MAAMC,YAAY,GAAG,CAArB;AAEA,IAAIC,aAAa,GAAG,IAAIL,OAAO,CAACM,OAAZ,CAAoBJ,aAApB,EAAmCC,cAAnC,EAAmDC,YAAnD,CAApB;AACA,IAAIG,UAAU,GAAG,QAAjB;AACA,IAAIC,gBAAgB,GAAG,QAAvB;;AACA,MAAMC,OAAN,SAAsBX,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAE5BY,KAF4B,GAEpB;AACJC,MAAAA,OAAO,EAAE;AADL,KAFoB;AAAA;;AAMb,QAAVC,UAAU,GAAE;AACb,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,KAAK,GAAE,KAAX;AACA,QAAIC,WAAW,GAAG,MAAMV,aAAa,CAACW,cAAd,GACfC,aADe,CACDT,gBADC,EACiBU,EADjB,EAAxB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACK,QAAZ,CAAqBC,MAAzC,EAAiDF,CAAC,EAAlD,EAAsD;AAClD,UAAIG,WAAW,GAAGP,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwBI,OAA1C;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CE,MAAhE,EAAwEG,CAAC,EAAzE,EAA6E;AACzE,YAAGT,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CK,CAA5C,EAA+CC,EAA/C,IAAqDjB,gBAArD,IAAyEO,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CK,CAA5C,EAA+C,WAA/C,KAA+D,IAAxI,IAAgJT,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CK,CAA5C,EAA+C,WAA/C,EAA4DH,MAA5D,IAAsE,CAAzN,EAA2N;AACvN,cAAKK,GAAG,GAAEC,MAAM,CAACZ,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CK,CAA5C,EAA+C,WAA/C,EAA4D,CAA5D,EAA+DI,KAA/D,CAAqEC,KAAtE,EAA6E,QAA7E,CAAN,CAA6FC,QAA7F,CAAsG,OAAtG,CAAV;AACAhB,UAAAA,KAAK,GAAE,IAAP;AACH;;AACD,YAAGC,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CK,CAA5C,EAA+CC,EAA/C,IAAqDlB,UAArD,IAAmEQ,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CK,CAA5C,EAA+C,WAA/C,KAA+D,IAAlI,IAA0IV,KAA1I,IAAmJC,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CK,CAA5C,EAA+C,WAA/C,EAA4DH,MAA5D,GAAqE,CAA3N,EAA6N;AACzN,cAAIU,KAAK,GAAEJ,MAAM,CAACZ,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CK,CAA5C,EAA+C,WAA/C,EAA4D,CAA5D,EAA+DI,KAA/D,CAAqEC,KAAtE,EAA6E,QAA7E,CAAN,CAA6FC,QAA7F,CAAsG,OAAtG,CAAX;AACA,cAAIE,IAAI,GAAEL,MAAM,CAACZ,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CK,CAA5C,EAA+C,WAA/C,EAA4D,CAA5D,EAA+DI,KAA/D,CAAqEC,KAAtE,EAA6E,QAA7E,CAAN,CAA6FC,QAA7F,CAAsG,OAAtG,CAAV;AACA,cAAIG,KAAK,GAAEN,MAAM,CAACZ,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CK,CAA5C,EAA+C,WAA/C,EAA4D,CAA5D,EAA+DI,KAA/D,CAAqEC,KAAtE,EAA6E,QAA7E,CAAN,CAA6FC,QAA7F,CAAsG,OAAtG,CAAX;AACA,cAAII,KAAK,GAAEP,MAAM,CAACZ,WAAW,CAACK,QAAZ,CAAqBD,CAArB,EAAwB,kBAAxB,EAA4CK,CAA5C,EAA+C,WAA/C,EAA4D,CAA5D,EAA+DI,KAA/D,CAAqEC,KAAtE,EAA6E,QAA7E,CAAN,CAA6FC,QAA7F,CAAsG,OAAtG,CAAX;AACAjB,UAAAA,IAAI,CAACsB,IAAL,CAAU;AAACC,YAAAA,GAAG,EAACd,WAAL;AAAkBe,YAAAA,MAAM,EAAC;AAACH,cAAAA,KAAK,EAACA,KAAP;AAAeF,cAAAA,IAAI,EAACA,IAApB;AAA0BC,cAAAA,KAAK,EAACA,KAAhC;AAAuCF,cAAAA,KAAK,EAACA,KAA7C;AAAoDO,cAAAA,SAAS,EAAEhB;AAA/D;AAAzB,WAAV;AACH;AACJ;AACJ;;AACD,SAAKiB,QAAL,CAAc;AAAC5B,MAAAA,OAAO,EAAEE;AAAV,KAAd;AACH;;AAED2B,EAAAA,iBAAiB,GAAE;AACf,SAAK5B,UAAL;AACH;;AAED6B,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjC,KAAL,CAAWC,OAAvB;AACA,wBACI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC;AAA3B;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AAvC2B;;AA0ChC,eAAeF,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport Cards from '../components/cards'\nconst algosdk = require('algosdk');\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\n\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\nlet car_app_id = 25532407;\nlet insurance_app_id = 25540600;\nclass allCars extends Component {\n\n    state = {\n        carList: []\n    }\n\n   async getAllCars(){\n        let data = [];\n        let check= false;\n        let accountInfo = await indexerClient.searchAccounts()\n                .applicationID(insurance_app_id).do();\n        for (let i = 0; i < accountInfo.accounts.length; i++) {\n            let InsuranceID = accountInfo.accounts[i].address;\n            for (let j = 0; j < accountInfo.accounts[i]['apps-local-state'].length; j++) {\n                if(accountInfo.accounts[i]['apps-local-state'][j].id == insurance_app_id && accountInfo.accounts[i]['apps-local-state'][j]['key-value'] != null && accountInfo.accounts[i]['apps-local-state'][j]['key-value'].length >= 1){\n                    let  acc =Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][0].value.bytes, 'base64').toString('ascii');\n                    check =true;\n                }\n                if(accountInfo.accounts[i]['apps-local-state'][j].id == car_app_id && accountInfo.accounts[i]['apps-local-state'][j]['key-value'] != null && check && accountInfo.accounts[i]['apps-local-state'][j]['key-value'].length > 2){    \n                    let color =Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][0].value.bytes, 'base64').toString('ascii');    \n                    let make =Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][1].value.bytes, 'base64').toString('ascii');    \n                    let model =Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][2].value.bytes, 'base64').toString('ascii'); \n                    let owner =Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][4].value.bytes, 'base64').toString('ascii');  \n                    data.push({Key:InsuranceID, Record:{owner:owner , make:make, model:model, color:color, insurance: InsuranceID}});\n                }    \n            }\n        }    \n        this.setState({carList: data});\n    }\n\n    componentDidMount(){    \n        this.getAllCars()\n    }\n\n    render() {\n        console.log(this.state.carList)\n        return (\n            <Cards carList={this.state.carList} />\n        );\n    }\n}\n\nexport default allCars;"]},"metadata":{},"sourceType":"module"}