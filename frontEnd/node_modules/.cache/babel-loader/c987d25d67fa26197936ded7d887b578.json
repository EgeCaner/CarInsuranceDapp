{"ast":null,"code":"var _jsxFileName = \"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/changeOwner.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst algosdk = require('algosdk');\n\nlet account;\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort = \"\";\nconst appIndex = 25351000;\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\nvar check = algodClient.healthCheck().do();\n\nif (check) {\n  console.log(\"client connected\");\n}\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n})); // function hashPassPhrase(passPhrase) {\n//     const hash = crypto.createHash('sha256')\n//     hash.update(passPhrase)\n//     return hash.digest('hex')\n// }\n\nconst waitForConfirmation = async function (algodclient, txId) {\n  let status = await algodclient.status().do();\n  let lastRound = status[\"last-round\"];\n\n  while (true) {\n    const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n    if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n      //Got the completed Transaction\n      console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n      break;\n    }\n\n    lastRound++;\n    await algodclient.statusAfterBlock(lastRound).do();\n  }\n};\n\nasync function getTestNetPrimaryAccount() {\n  await window.AlgoSigner.accounts({\n    ledger: 'TestNet'\n  }).then(d => {\n    if (d && d.length > 0) {\n      console.log(`Account found: ${JSON.stringify(d[0])}`);\n      account = d[0];\n    } else {\n      throw 'Primary test account not found in AlgoSigner.';\n    }\n  }).catch(e => {\n    console.log(JSON.stringify(e), 'bad');\n  });\n}\n\nexport default function ChangeCarOwner() {\n  _s();\n\n  const classes = useStyles(); //States\n\n  const [carID, setCarID] = React.useState('');\n  const [newOwner, setNewOwner] = React.useState('');\n  const [hash, setHash] = React.useState('');\n  const [firstValid, setFirstValid] = React.useState('');\n  const [lastValid, setLastValid] = React.useState('');\n  const [receiver, setReceiver] = React.useState(''); //State Handlers\n\n  const handleCarID = event => {\n    setCarID(event.target.value);\n  };\n\n  const handleNewOwner = event => {\n    setNewOwner(event.target.value);\n  };\n\n  const handleReceiver = event => {\n    setReceiver(event.target.value);\n  };\n\n  const handleFirstValid = event => {\n    setFirstValid(event.target.value);\n  };\n\n  const handleLastValid = event => {\n    setLastValid(event.target.value);\n  };\n\n  const handleHash = event => {\n    setHash(event.target.value);\n  };\n\n  const handleHTLC = async () => {\n    try {\n      if (typeof window.AlgoSigner !== 'undefined') {\n        console.log(\"algosigner installed\");\n      } else {\n        console.log(\"algosigner not installed\");\n      }\n\n      window.AlgoSigner.connect().then(d => {\n        console.log(\"Connect\");\n      }).catch(e => {\n        console.error(e);\n      });\n      getTestNetPrimaryAccount(); // get node suggested parameters\n\n      let params = await algodClient.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true;\n      let appArgs = [];\n      appArgs.push(new Uint8Array(Buffer.from(\"setHTLC\")));\n      appArgs.push(new Uint8Array(Buffer.from(hash)));\n      appArgs.push(new Uint8Array(Buffer.from(firstValid)));\n      appArgs.push(new Uint8Array(Buffer.from(lastValid)));\n      let txn = algosdk.makeApplicationNoOpTxn(account.address, params, appIndex, appArgs, [carID, receiver]);\n      let txId = txn.txID().toString(); // Sign the transaction\n\n      let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n      let signedTxs = await window.AlgoSigner.signTxn([{\n        txn: base64Tx\n      }]); // Get the base64 encoded signed transaction and convert it to binary\n\n      let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);\n      console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n      await algodClient.sendRawTransaction(signedTxn).do(); // Wait for confirmation\n\n      await waitForConfirmation(algodClient, txId); // display results\n\n      let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n      console.log(\"Called app-id:\", transactionResponse['txn']['txn']['apid']);\n\n      if (transactionResponse['global-state-delta'] !== undefined) {\n        console.log(\"Global State updated:\", transactionResponse['global-state-delta']);\n      }\n\n      if (transactionResponse['local-state-delta'] !== undefined) {\n        console.log(\"Local State updated:\", transactionResponse['local-state-delta']);\n      }\n    } catch (error) {\n      console.log(`Failed: AddCar - ${error}`);\n      return 0;\n    }\n  };\n\n  const handleSubmit = async () => {\n    try {\n      if (typeof window.AlgoSigner !== 'undefined') {\n        console.log(\"algosigner installed\");\n      } else {\n        console.log(\"algosigner not installed\");\n      }\n\n      window.AlgoSigner.connect().then(d => {\n        console.log(\"Connect\");\n      }).catch(e => {\n        console.error(e);\n      });\n      getTestNetPrimaryAccount(); // get node suggested parameters\n\n      let params = await algodClient.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true;\n      let appArgs = [];\n      appArgs.push(new Uint8Array(Buffer.from(\"changeOwner\"))); //appArgs.push(new Uint8Array(Buffer.from(newOwner)));\n      // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n      //let state= await client.accountInformation(account.addr).do()\n      //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n\n      let txn = algosdk.makeApplicationNoOpTxn(account.address, params, appIndex, appArgs, [carID, newOwner]);\n      let txId = txn.txID().toString(); // Sign the transaction\n\n      let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n      let signedTxs = await window.AlgoSigner.signTxn([{\n        txn: base64Tx\n      }]); // Get the base64 encoded signed transaction and convert it to binary\n\n      let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);\n      console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n      await algodClient.sendRawTransaction(signedTxn).do(); // Wait for confirmation\n\n      await waitForConfirmation(algodClient, txId); // display results\n\n      let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n      console.log(\"Called app-id:\", transactionResponse['txn']['txn']['apid']);\n\n      if (transactionResponse['global-state-delta'] !== undefined) {\n        console.log(\"Global State updated:\", transactionResponse['global-state-delta']);\n      }\n\n      if (transactionResponse['local-state-delta'] !== undefined) {\n        console.log(\"Local State updated:\", transactionResponse['local-state-delta']);\n      }\n    } catch (error) {\n      console.log(`Failed: AddCar - ${error}`);\n      return 0;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Set HTLC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"CarID\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Hash\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"First Valid Round\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleFirstValid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Last Valid Round\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleLastValid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Receiver\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleReceiver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleHTLC,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Unlock HTLC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"CarID\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleCarID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.margin,\n      id: \"input-with-icon-textfield\",\n      label: \"Secret Key\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 25\n        }, this)\n      },\n      onInput: handleNewOwner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChangeCarOwner, \"JNGTxrcEHc64rkj/DAtN/RItZKo=\", false, function () {\n  return [useStyles];\n});\n\n_c = ChangeCarOwner;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangeCarOwner\");","map":{"version":3,"sources":["/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/changeOwner.js"],"names":["React","makeStyles","InputAdornment","Button","TextField","algosdk","require","account","algodAddress","algodToken","algodPort","appIndex","algodClient","Algodv2","check","healthCheck","do","console","log","useStyles","theme","margin","spacing","waitForConfirmation","algodclient","txId","status","lastRound","pendingInfo","pendingTransactionInformation","statusAfterBlock","getTestNetPrimaryAccount","window","AlgoSigner","accounts","ledger","then","d","length","JSON","stringify","catch","e","ChangeCarOwner","classes","carID","setCarID","useState","newOwner","setNewOwner","hash","setHash","firstValid","setFirstValid","lastValid","setLastValid","receiver","setReceiver","handleCarID","event","target","value","handleNewOwner","handleReceiver","handleFirstValid","handleLastValid","handleHash","handleHTLC","connect","error","params","getTransactionParams","fee","flatFee","appArgs","push","Uint8Array","Buffer","from","txn","makeApplicationNoOpTxn","address","txID","toString","base64Tx","encoding","msgpackToBase64","toByte","signedTxs","signTxn","signedTxn","base64ToMsgpack","blob","sendRawTransaction","transactionResponse","undefined","handleSubmit","startAdornment"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField';\nconst algosdk = require('algosdk');\nlet account;\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\nconst appIndex = 25351000;\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\n\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\n// function hashPassPhrase(passPhrase) {\n//     const hash = crypto.createHash('sha256')\n//     hash.update(passPhrase)\n//     return hash.digest('hex')\n// }\n\nconst waitForConfirmation = async function (algodclient, txId) {\n    let status = (await algodclient.status().do());\n    let lastRound = status[\"last-round\"];\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n        lastRound++;\n        await algodclient.statusAfterBlock(lastRound).do();\n      }\n    };\n\n    async function getTestNetPrimaryAccount(){\n        await window.AlgoSigner.accounts({ledger: 'TestNet'})\n        .then((d) => {\n            if(d && d.length > 0){\n                console.log(`Account found: ${JSON.stringify(d[0])}`);\n                account = d[0];\n            }\n            else{\n                throw('Primary test account not found in AlgoSigner.');\n            }\n        })\n        .catch((e) => {\n            console.log(JSON.stringify(e),'bad');\n        });\n    }\nexport default function ChangeCarOwner() {\n    const classes = useStyles();\n\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [newOwner, setNewOwner] = React.useState('')\n    const [hash, setHash] = React.useState('')\n    const [firstValid, setFirstValid] = React.useState('')\n    const [lastValid, setLastValid] = React.useState('')\n    const [receiver, setReceiver] = React.useState('')\n    //State Handlers\n    const handleCarID = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleNewOwner = (event) => {\n        setNewOwner(event.target.value)\n    }\n\n    const handleReceiver = (event) => {\n        setReceiver(event.target.value)\n    }\n    const handleFirstValid = (event) => {\n        setFirstValid(event.target.value)\n    }\n\n    const handleLastValid = (event) => {\n        setLastValid(event.target.value)\n    }\n    const handleHash = (event) => {\n        setHash(event.target.value)\n    }\n\n    const handleHTLC = async () => {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"setHTLC\")));\n            appArgs.push(new Uint8Array(Buffer.from(hash)));\n            appArgs.push(new Uint8Array(Buffer.from(firstValid)));\n            appArgs.push(new Uint8Array(Buffer.from(lastValid)))\n            let txn = algosdk.makeApplicationNoOpTxn(account.address, params, appIndex, appArgs,[carID,receiver]);\n            let txId = txn.txID().toString();\n        \n            // Sign the transaction\n            let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n            let signedTxs = await window.AlgoSigner.signTxn([\n             {\n                txn: base64Tx,\n             },\n            ]);\n        \n            // Get the base64 encoded signed transaction and convert it to binary\n           let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); \n            console.log(\"Signed transaction with txID: %s\", txId);\n        \n            // Submit the transaction\n            await algodClient.sendRawTransaction(signedTxn).do();\n        \n            // Wait for confirmation\n            await waitForConfirmation(algodClient, txId);\n        \n            // display results\n            let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n            console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n            if (transactionResponse['global-state-delta'] !== undefined ) {\n                console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n            }\n            if (transactionResponse['local-state-delta'] !== undefined ) {\n                console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n            }\n            }catch(error){\n                console.log(`Failed: AddCar - ${error}`);\n                return 0;\n            }\n    }\n\n    const handleSubmit = async () => {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"changeOwner\")));\n            //appArgs.push(new Uint8Array(Buffer.from(newOwner)));\n            // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n            //let state= await client.accountInformation(account.addr).do()\n            //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n            let txn = algosdk.makeApplicationNoOpTxn(account.address, params, appIndex, appArgs,[carID,newOwner]);\n            let txId = txn.txID().toString();\n        \n            // Sign the transaction\n            let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n            let signedTxs = await window.AlgoSigner.signTxn([\n             {\n                txn: base64Tx,\n             },\n            ]);\n        \n            // Get the base64 encoded signed transaction and convert it to binary\n           let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); \n            console.log(\"Signed transaction with txID: %s\", txId);\n        \n            // Submit the transaction\n            await algodClient.sendRawTransaction(signedTxn).do();\n        \n            // Wait for confirmation\n            await waitForConfirmation(algodClient, txId);\n        \n            // display results\n            let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n            console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n            if (transactionResponse['global-state-delta'] !== undefined ) {\n                console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n            }\n            if (transactionResponse['local-state-delta'] !== undefined ) {\n                console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n            }\n            }catch(error){\n                console.log(`Failed: AddCar - ${error}`);\n                return 0;\n            }\n    }\n\n    return (\n        <div>\n            <br></br>\n            <h2>Set HTLC</h2>\n            <br></br>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarID}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Hash\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleHash}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"First Valid Round\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleFirstValid}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Last Valid Round\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleLastValid}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Receiver\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleReceiver}\n            />\n            <Button onClick={handleHTLC}>\n                Submit\n            </Button>\n            <br></br>\n            <h2>Unlock HTLC</h2>\n            <br></br>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarID}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Secret Key\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleNewOwner}\n            />\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n            <br></br>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}