{"ast":null,"code":"var _jsxFileName = \"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/allCars.js\";\nimport React, { Component } from 'react';\nimport Cards from '../components/cards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst algosdk = require('algosdk');\n\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port); //let car_app_id = 23658482;\n\nlet car_app_id = 25351000;\n\nclass allCars extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      carList: []\n    };\n  }\n\n  async getAllCars() {\n    let data = [];\n    let accountInfo = await indexerClient.searchAccounts().applicationID(car_app_id).do();\n\n    for (let i = 0; i < accountInfo.accounts.length; i++) {\n      let Key = accountInfo.accounts[i].address;\n\n      for (let j = 0; j < accountInfo.accounts[i]['apps-local-state'].length; j++) {\n        if (accountInfo.accounts[i]['apps-local-state'][j].id == car_app_id) {\n          if (accountInfo.accounts[i]['apps-local-state'][j]['key-value'] != null) {\n            if (accountInfo.accounts[i]['apps-local-state'][j]['key-value'].length == 4) {\n              let color = Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][0].value.bytes, 'base64').toString('ascii');\n              let make = Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][1].value.bytes, 'base64').toString('ascii');\n              let model = Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][2].value.bytes, 'base64').toString('ascii'); //let Key =Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][3].value.bytes, 'base64').toString('ascii');\n\n              let owner = Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][5].value.bytes, 'base64').toString('ascii');\n              data.push({\n                Key: Key,\n                Record: {\n                  owner: owner,\n                  make: make,\n                  model: model,\n                  color: color\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n\n    this.setState({\n      carList: data\n    });\n  }\n\n  componentDidMount() {\n    this.getAllCars();\n  }\n\n  render() {\n    console.log(this.state.carList);\n    return /*#__PURE__*/_jsxDEV(Cards, {\n      carList: this.state.carList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default allCars;","map":{"version":3,"sources":["/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/allCars.js"],"names":["React","Component","Cards","algosdk","require","indexer_token","indexer_server","indexer_port","indexerClient","Indexer","car_app_id","allCars","state","carList","getAllCars","data","accountInfo","searchAccounts","applicationID","do","i","accounts","length","Key","address","j","id","color","Buffer","value","bytes","toString","make","model","owner","push","Record","setState","componentDidMount","render","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Cards from '../components/cards'\n\nconst algosdk = require('algosdk');\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\n\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\n//let car_app_id = 23658482;\nlet car_app_id = 25351000;\nclass allCars extends Component {\n\n    state = {\n        carList: []\n    }\n\n    \n   async getAllCars(){\n        let data = [];\n        let accountInfo = await indexerClient.searchAccounts()\n                .applicationID(car_app_id).do();\n        for (let i = 0; i < accountInfo.accounts.length; i++) {\n            let Key = accountInfo.accounts[i].address;\n            for (let j = 0; j < accountInfo.accounts[i]['apps-local-state'].length; j++) {\n                if(accountInfo.accounts[i]['apps-local-state'][j].id == car_app_id){\n                    if(accountInfo.accounts[i]['apps-local-state'][j]['key-value'] != null){\n                        if(accountInfo.accounts[i]['apps-local-state'][j]['key-value'].length== 4) {\n                            let color =Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][0].value.bytes, 'base64').toString('ascii');    \n                            let make =Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][1].value.bytes, 'base64').toString('ascii');    \n                            let model =Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][2].value.bytes, 'base64').toString('ascii');    \n                            //let Key =Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][3].value.bytes, 'base64').toString('ascii');\n                            let owner =Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][5].value.bytes, 'base64').toString('ascii');    \n                            data.push({Key:Key,Record:{owner:owner , make:make, model:model, color:color}});\n                        }\n                    }\n                }   \n            }\n        }     \n        this.setState({carList: data});\n    }\n\n    componentDidMount(){    \n        this.getAllCars()\n    }\n\n    render() {\n        console.log(this.state.carList)\n        return (\n            <Cards carList={this.state.carList} />\n        );\n    }\n}\n\nexport default allCars;"]},"metadata":{},"sourceType":"module"}