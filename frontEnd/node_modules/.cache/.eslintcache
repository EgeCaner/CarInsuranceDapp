[{"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/changeOwner.js":"1","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/index.js":"2","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/App.js":"3","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/reportWebVitals.js":"4","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/AppHeader.js":"5","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/Home.js":"6","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/addCarWithInsurance.js":"7","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allCars.js":"8","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/changeOwner.js":"9","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allCarInsurances.js":"10","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/addCar.js":"11","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/components/cardInsurance.js":"12","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/components/cards.js":"13","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allHTLC.js":"14","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/components/htlcInfo.js":"15"},{"size":11417,"mtime":1631086697032,"results":"16","hashOfConfig":"17"},{"size":627,"mtime":1629917217662,"results":"18","hashOfConfig":"19"},{"size":1414,"mtime":1631217177361,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1629917217664,"results":"21","hashOfConfig":"19"},{"size":855,"mtime":1631217297086,"results":"22","hashOfConfig":"19"},{"size":246,"mtime":1631059865652,"results":"23","hashOfConfig":"19"},{"size":12125,"mtime":1631209048887,"results":"24","hashOfConfig":"19"},{"size":2762,"mtime":1631207058240,"results":"25","hashOfConfig":"19"},{"size":11150,"mtime":1631207213613,"results":"26","hashOfConfig":"19"},{"size":3245,"mtime":1631208959063,"results":"27","hashOfConfig":"19"},{"size":11019,"mtime":1631208876601,"results":"28","hashOfConfig":"19"},{"size":838,"mtime":1631202565437,"results":"29","hashOfConfig":"19"},{"size":739,"mtime":1631202502041,"results":"30","hashOfConfig":"19"},{"size":2524,"mtime":1631219336718,"results":"31","hashOfConfig":"19"},{"size":679,"mtime":1631219451382,"results":"32","hashOfConfig":"19"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},"11u6c9e",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"221ku1",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"39"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"39"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"39"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/changeOwner.js",["72","73","74","75","76"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField';\nconst algosdk = require('algosdk');\nlet account;\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\nconst appIndex = 25532407;\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\n\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\n// function hashPassPhrase(passPhrase) {\n//     const hash = crypto.createHash('sha256')\n//     hash.update(passPhrase)\n//     return hash.digest('hex')\n// }\n\nconst waitForConfirmation = async function (algodclient, txId) {\n    let status = (await algodclient.status().do());\n    let lastRound = status[\"last-round\"];\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n        lastRound++;\n        await algodclient.statusAfterBlock(lastRound).do();\n      }\n    };\n\n    async function getTestNetPrimaryAccount(){\n        await window.AlgoSigner.accounts({ledger: 'TestNet'})\n        .then((d) => {\n            if(d && d.length > 0){\n                console.log(`Account found: ${JSON.stringify(d[0])}`);\n                account = d[1];\n            }\n            else{\n                throw('Primary test account not found in AlgoSigner.');\n            }\n        })\n        .catch((e) => {\n            console.log(JSON.stringify(e),'bad');\n        });\n    }\nexport default function ChangeCarOwner() {\n    const classes = useStyles();\n\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [carId, setCarId] = React.useState('')\n    const [newOwner, setNewOwner] = React.useState('')\n    const [hash, setHash] = React.useState('')\n    const [firstValid, setFirstValid] = React.useState('')\n    const [lastValid, setLastValid] = React.useState('')\n    const [receiver, setReceiver] = React.useState('')\n    //State Handlers\n    const handleCarID = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleCarId = (event) => {\n        setCarId(event.target.value)\n    }\n\n    const handleNewOwner = (event) => {\n        setNewOwner(event.target.value)\n    }\n\n    const handleReceiver = (event) => {\n        setReceiver(event.target.value)\n    }\n    const handleFirstValid = (event) => {\n        setFirstValid(event.target.value)\n    }\n\n    const handleLastValid = (event) => {\n        setLastValid(event.target.value)\n    }\n    const handleHash = (event) => {\n        setHash(event.target.value)\n    }\n\n    const handleHTLC = async () => {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"setHTLC\")));\n            appArgs.push(new Uint8Array(Buffer.from(hash)));\n            let txn = algosdk.makeApplicationNoOpTxn(account.address, params, appIndex, appArgs,[carID,receiver]);\n            let txId = txn.txID().toString();\n        \n            // Sign the transaction\n            let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n            let signedTxs = await window.AlgoSigner.signTxn([\n             {\n                txn: base64Tx,\n             },\n            ]);\n        \n            // Get the base64 encoded signed transaction and convert it to binary\n           let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); \n            console.log(\"Signed transaction with txID: %s\", txId);\n        \n            // Submit the transaction\n            await algodClient.sendRawTransaction(signedTxn).do();\n        \n            // Wait for confirmation\n            await waitForConfirmation(algodClient, txId);\n        \n            // display results\n            let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n            console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n            if (transactionResponse['global-state-delta'] !== undefined ) {\n                console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n            }\n            if (transactionResponse['local-state-delta'] !== undefined ) {\n                console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n            }\n            }catch(error){\n                console.log(`Failed: AddCar - ${error}`);\n                return 0;\n            }\n    }\n\n    const handleSubmit = async () => {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"changeOwner\")));\n            appArgs.push(new Uint8Array(Buffer.from(newOwner)));\n            let txn = algosdk.makeApplicationNoOpTxn(account.address, params, appIndex, appArgs,[carId]);\n            let txId = txn.txID().toString();\n        \n            // Sign the transaction\n            let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n            let signedTxs = await window.AlgoSigner.signTxn([\n             {\n                txn: base64Tx,\n             },\n            ]);\n        \n            // Get the base64 encoded signed transaction and convert it to binary\n           let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); \n            console.log(\"Signed transaction with txID: %s\", txId);\n        \n            // Submit the transaction\n            await algodClient.sendRawTransaction(signedTxn).do();\n        \n            // Wait for confirmation\n            await waitForConfirmation(algodClient, txId);\n        \n            // display results\n            let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n            console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n            if (transactionResponse['global-state-delta'] !== undefined ) {\n                console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n            }\n            if (transactionResponse['local-state-delta'] !== undefined ) {\n                console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n            }\n            }catch(error){\n                console.log(`Failed: AddCar - ${error}`);\n                return 0;\n            }\n    }\n\n    return (\n        <div>\n            <br></br>\n            <h2>Set HTLC</h2>\n            <br></br>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarID}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Hash\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleHash}\n            />\n            {/*<TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"First Valid Round\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleFirstValid}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Last Valid Round\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleLastValid}\n            />*/}\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Receiver\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleReceiver}\n            />\n            <Button onClick={handleHTLC}>\n                Submit\n            </Button>\n            <br></br>\n            <h2>Unlock HTLC</h2>\n            <br></br>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarId}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Secret Key\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleNewOwner}\n            />\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n            <br></br>\n        </div>\n    );\n}\n",["77","78"],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/index.js",[],["79","80"],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/App.js",[],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/reportWebVitals.js",[],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/AppHeader.js",[],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/Home.js",["81"],"import React from 'react';\nimport {\n  Typography,\n} from '@material-ui/core';\n\nexport default () => (\n  <div>\n    <Typography variant=\"h6\">Algorand Sample application</Typography>\n    <p variant=\"h6\">This simple car & insurance</p>\n  </div>\n  \n);","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/addCarWithInsurance.js",["82","83","84","85"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nconst algosdk = require('algosdk');\nlet account;\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\nlet stateless_acc_addr;\nlet car_app_id = 25532407;\nlet insurance_app_id = 25540600;\n\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\n\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\nconst waitForConfirmation = async function (algodclient, txId) {\n    let status = (await algodclient.status().do());\n    let lastRound = status[\"last-round\"];\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n        lastRound++;\n        await algodclient.statusAfterBlock(lastRound).do();\n      }\n    };\n\n    async function getTestNetPrimaryAccount(){\n        await window.AlgoSigner.accounts({ledger: 'TestNet'})\n        .then((d) => {\n            if(d && d.length > 0){\n                console.log(`Account found: ${JSON.stringify(d[0])}`);\n                account = d[0];\n            }\n            else{\n                throw('Primary test account not found in AlgoSigner.');\n            }\n        })\n        .catch((e) => {\n            console.log(JSON.stringify(e),'bad');\n        });\n    }\n\n    async function payment(to, amount, client){\n        try{\n        window.AlgoSigner.connect()\n          .then((d) => {\n            console.log(\"Connect\")\n          })\n          .catch((e) => {\n            console.error(e);\n          });\n        getTestNetPrimaryAccount();\n        // get node suggested parameters\n        let params = await client.getTransactionParams().do();\n        // comment out the next two lines to use suggested fee\n        params.fee = 1000;\n        params.flatFee = true;\n    \n        // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n        //let state= await client.accountInformation(account.addr).do()\n        //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n        const closeToRemaninder = undefined;\n        const note = undefined;\n        let txn = algosdk.makePaymentTxnWithSuggestedParams(account.address, to, amount, closeToRemaninder, note, params);\n        let txId = txn.txID().toString();\n        let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n    \n        let signedTxs = await window.AlgoSigner.signTxn([\n         {\n            txn: base64Tx,\n         },\n        ]);\n    \n        // Get the base64 encoded signed transaction and convert it to binary\n       let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);    \n        // Sign the transaction\n        console.log(\"Signed transaction with txID: %s\", txId);\n    \n        // Submit the transaction\n        await client.sendRawTransaction(signedTxn).do();\n    \n        // Wait for confirmation\n        await waitForConfirmation(client, txId);\n    \n        // display results\n        let transactionResponse = await client.pendingTransactionInformation(txId).do();\n        console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n        if (transactionResponse['global-state-delta'] !== undefined ) {\n            console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n        }\n        if (transactionResponse['local-state-delta'] !== undefined ) {\n            console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n        }\n        }catch(error){\n            console.log(`Failed: Payment: - ${error}`);\n            return 0;\n        }\n    \n    }\n    async function optIn(){\n        try{\n             // get suggested parameters\n        const params = await algodClient.getTransactionParams().do();\n        // comment out the next two lines to use suggested fee\n        params.fee = 1000;\n        params.flatFee = true;\n    \n        let rand =Math.floor(Math.random() * 2**64);\n        const data = \"#pragma version 4\\n\" + \"int \"+rand.toString()+\"\\nint \"+rand.toString()+\"\\n>\\nbz success\\nint 1\\nreturn\\nsuccess:\\nint 1\\nreturn\";\n        const  results = await algodClient.compile(data).do();\n        console.log(\"Hash = \" + results.hash);\n        console.log(\"Result = \" + results.result);\n    \n        const program = new Uint8Array(Buffer.from(results.result, \"base64\"));\n        \n        const lsig = algosdk.makeLogicSig(program);\n        console.log(\"lsig : \" + lsig.address());   \n    \n        // create a transaction\n        const sender = lsig.address();\n        await payment(sender, 3000000, algodClient);\n        stateless_acc_addr = sender;\n    \n        const txn_1 = algosdk.makeApplicationOptInTxn(sender, params, insurance_app_id);\n        const txn_2 = algosdk.makeApplicationOptInTxn(sender, params, car_app_id);\n        let txns = [txn_1, txn_2];\n        let txgroup = algosdk.assignGroupID(txns);\n        const rawSignedTxn_1 = algosdk.signLogicSigTransactionObject(txgroup[0], lsig);\n        const rawSignedTxn_2 = algosdk.signLogicSigTransactionObject(txgroup[1], lsig);\n        let signed =[rawSignedTxn_1.blob, rawSignedTxn_2.blob];\n        // send raw LogicSigTransaction to network\n        const tx = await algodClient.sendRawTransaction(signed).do();\n        console.log(\"Transaction : \" + tx.txId);   \n        await waitForConfirmation(algodClient, tx.txId);\n        return lsig.address();\n        }catch(error){\n            console.log(\"OptIn: \"+error);\n        }\n    }\n\nexport default function AddCar() {\n    const classes = useStyles();\n\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [carMake, setCarMake] = React.useState('')\n    const [carModel, setCarModel] = React.useState('')\n    const [carColor, setCarColor] = React.useState('')\n    const [carOwner, setCarOwner] = React.useState('')\n    const [carInsurance, setCarInsurance] = React.useState('')\n\n    //Handlers\n    const handleCarID = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleCarModel = (event) => {\n        setCarModel(event.target.value)\n    }\n\n    const handleCarMake = (event) => {\n        setCarMake(event.target.value)\n    }\n\n    const handleCarColor = (event) => {\n        setCarColor(event.target.value)\n    }\n\n    const handleCarOwner = (event) => {\n        setCarOwner(event.target.value)\n    }\n\n    const handleCarInsurance = (event) => {\n        setCarInsurance(event.target.value)\n    }\n\n   const handleSubmit = async function () {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            await optIn();\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArg = [];\n            appArg.push(new Uint8Array(Buffer.from(\"createInsurance\")));\n            appArg.push(new Uint8Array(Buffer.from(carInsurance))); \n            // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n            //let state= await client.accountInformation(account.addr).do()\n            //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n            let txn_1 = algosdk.makeApplicationNoOpTxn(account.address, params, insurance_app_id, appArg,[stateless_acc_addr],[car_app_id]);\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n            appArgs.push(new Uint8Array(Buffer.from(carMake)));\n            appArgs.push(new Uint8Array(Buffer.from(carModel)));\n            appArgs.push(new Uint8Array(Buffer.from(carColor)));\n            appArgs.push(new Uint8Array(Buffer.from(carOwner)));\n            let txn_2 = algosdk.makeApplicationNoOpTxn(account.address, params, car_app_id, appArgs, [stateless_acc_addr]);\n            let txns = []\n            txns.push(txn_2);\n            txns.push(txn_1);\n            let txgroup = algosdk.assignGroupID(txns);\n            let signed =[]\n            let base64Tx_O = window.AlgoSigner.encoding.msgpackToBase64(txgroup[0].toByte());\n            let base64Tx_1 = window.AlgoSigner.encoding.msgpackToBase64(txgroup[1].toByte());\n            let signedTxs_0 = await window.AlgoSigner.signTxn([\n                {\n                   txn: base64Tx_O,\n                }]);\n            let signedTxs_1 = await window.AlgoSigner.signTxn([\n                {\n                   txn: base64Tx_1,\n                }]);\n            signed.push(window.AlgoSigner.encoding.base64ToMsgpack(signedTxs_0[0].blob)); \n            signed.push(window.AlgoSigner.encoding.base64ToMsgpack(signedTxs_1[0].blob));  \n            let tx = (await algodClient.sendRawTransaction(signed).do());\n            console.log(\"Transaction : \" + tx.txId);\n            await waitForConfirmation(algodClient, tx.txId)\n        }catch(error){\n            console.log(`Failed: AddCar - ${error}`);\n            return 0;\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Make\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarMake}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Model\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarModel}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Color\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarColor}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Production Year\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarOwner}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Insurance\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarInsurance}\n            />\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n        </div>\n    );\n}\n","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allCars.js",["86","87","88","89","90","91"],"import React, { Component } from 'react';\nimport Cards from '../components/cards';\n\nconst algosdk = require('algosdk');\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\n\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\nlet car_app_id = 25532407;\nclass allCars extends Component {\n\n    state = {\n        carList: []\n    }\n\n   async getAllCars(){\n        let data = [];\n        try{\n            let accountInfo = await indexerClient.searchAccounts()\n                    .applicationID(car_app_id).do();\n            for (let i = 0; i < accountInfo.accounts.length; i++) {\n                let Key = accountInfo.accounts[i].address;\n                for (let j = 0; j < accountInfo.accounts[i]['apps-local-state'].length; j++) {\n                    if(accountInfo.accounts[i]['apps-local-state'][j].id == car_app_id){\n                        let temp =accountInfo.accounts[i]['apps-local-state'][j]['key-value'];\n                        if(temp != null && temp.length > 2){\n                            let make;\n                            let color;\n                            let model;\n                            let owner;\n                            let year;\n                            for (let k = 0; k < temp.length; k++) {                                  \n                                (Buffer(temp[k].key, 'base64').toString('ascii') == \"CarManufacturer\" ? make = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : Buffer(temp[k].key, 'base64').toString('ascii') == \"CarColor\" ? color = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : Buffer(temp[k].key, 'base64').toString('ascii') == \"CarModel\" ? model = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : Buffer(temp[k].key, 'base64').toString('ascii') == \"ProdYear\" ? year = Buffer(temp[k].value.bytes, 'base64').toString('ascii'):Buffer(temp[k].key, 'base64').toString('ascii') == \"Owner\" ? owner = algosdk.encodeAddress(Buffer(temp[k].value.bytes, 'base64')): console.log(\"AllCarsEmptyEntity!!!\"));           \n                            }     \n                            \n                            data.push({Key:Key,Record:{owner:owner , make:make, model:model, color:color ,year: year}});               \n                        }\n                    }   \n                }\n            }     \n        } catch (error) {\n            console.log(\"GetAllInsurance ---->\" + error);\n        }\n        this.setState({carList: data});\n    }\n\n    componentDidMount(){    \n        this.getAllCars()\n    }\n\n    render() {\n        console.log(this.state.carList)\n        return (\n            <Cards carList={this.state.carList} />\n        );\n    }\n}\n\nexport default allCars;","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/changeOwner.js",["92"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField';\nconst algosdk = require('algosdk');\nlet account;\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\nconst appIndex = 25532407;\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\n\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\n// function hashPassPhrase(passPhrase) {\n//     const hash = crypto.createHash('sha256')\n//     hash.update(passPhrase)\n//     return hash.digest('hex')\n// }\n\nconst waitForConfirmation = async function (algodclient, txId) {\n    let status = (await algodclient.status().do());\n    let lastRound = status[\"last-round\"];\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n        lastRound++;\n        await algodclient.statusAfterBlock(lastRound).do();\n      }\n    };\n\n    async function getTestNetPrimaryAccount(){\n        await window.AlgoSigner.accounts({ledger: 'TestNet'})\n        .then((d) => {\n            if(d && d.length > 0){\n                console.log(`Account found: ${JSON.stringify(d[0])}`);\n                account = d[0];\n            }\n            else{\n                throw('Primary test account not found in AlgoSigner.');\n            }\n        })\n        .catch((e) => {\n            console.log(JSON.stringify(e),'bad');\n        });\n    }\nexport default function ChangeCarOwner() {\n    const classes = useStyles();\n\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [carId, setCarId] = React.useState('')\n    const [newOwner, setNewOwner] = React.useState('')\n    const [hash, setHash] = React.useState('')\n    const [receiver, setReceiver] = React.useState('')\n    //State Handlers\n    const handleCarID = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleCarId = (event) => {\n        setCarId(event.target.value)\n    }\n\n    const handleNewOwner = (event) => {\n        setNewOwner(event.target.value)\n    }\n\n    const handleReceiver = (event) => {\n        setReceiver(event.target.value)\n    }\n\n    const handleHash = (event) => {\n        setHash(event.target.value)\n    }\n\n    const handleHTLC = async () => {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"setHTLC\")));\n            appArgs.push(new Uint8Array(Buffer.from(hash)));\n            let txn = algosdk.makeApplicationNoOpTxn(account.address, params, appIndex, appArgs,[carID,receiver]);\n            let txId = txn.txID().toString();\n        \n            // Sign the transaction\n            let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n            let signedTxs = await window.AlgoSigner.signTxn([\n             {\n                txn: base64Tx,\n             },\n            ]);\n        \n            // Get the base64 encoded signed transaction and convert it to binary\n           let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); \n            console.log(\"Signed transaction with txID: %s\", txId);\n        \n            // Submit the transaction\n            await algodClient.sendRawTransaction(signedTxn).do();\n        \n            // Wait for confirmation\n            await waitForConfirmation(algodClient, txId);\n            // display results\n            let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n            console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n            if (transactionResponse['global-state-delta'] !== undefined ) {\n                console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n            }\n            if (transactionResponse['local-state-delta'] !== undefined ) {\n                console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n            }\n            }catch(error){\n                console.log(`Failed: AddCar - ${error}`);\n                return 0;\n            }\n    }\n\n    const handleSubmit = async () => {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"changeOwner\")));\n            appArgs.push(new Uint8Array(Buffer.from(newOwner)));\n            let txn = algosdk.makeApplicationNoOpTxn(account.address, params, appIndex, appArgs,[carId]);\n            let txId = txn.txID().toString();\n        \n            // Sign the transaction\n            let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n            let signedTxs = await window.AlgoSigner.signTxn([\n             {\n                txn: base64Tx,\n             },\n            ]);\n        \n            // Get the base64 encoded signed transaction and convert it to binary\n           let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); \n            console.log(\"Signed transaction with txID: %s\", txId);\n        \n            // Submit the transaction\n            await algodClient.sendRawTransaction(signedTxn).do();\n        \n            // Wait for confirmation\n            await waitForConfirmation(algodClient, txId);\n        \n            // display results\n            let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n            console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n            if (transactionResponse['global-state-delta'] !== undefined ) {\n                console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n            }\n            if (transactionResponse['local-state-delta'] !== undefined ) {\n                console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n            }\n            }catch(error){\n                console.log(`Failed: AddCar - ${error}`);\n                return 0;\n            }\n    }\n\n    return (\n        <div>\n            <br></br>\n            <h2>Set HTLC(Time interval fixed to 2000 rounds)</h2>\n            <br></br>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarID}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Hash\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleHash}\n            />\n            {/*<TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"First Valid Round\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleFirstValid}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Last Valid Round\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleLastValid}\n            />*/}\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Receiver\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleReceiver}\n            />\n            <Button onClick={handleHTLC}>\n                Submit\n            </Button>\n            <br></br>\n            <h2>Unlock HTLC</h2>\n            <br></br>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarId}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Secret Key\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleNewOwner}\n            />\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n            <br></br>\n        </div>\n    );\n}\n","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allCarInsurances.js",["93","94","95","96","97","98","99"],"import React, { Component } from 'react';\nimport CardInsurance from '../components/cardInsurance';\nconst algosdk = require('algosdk');\nconst indexer_token = \"\";\nconst indexer_server = \"https://testnet.algoexplorerapi.io/idx2/\";\nconst indexer_port = 0;\n\nlet indexerClient = new algosdk.Indexer(indexer_token, indexer_server, indexer_port);\nlet car_app_id = 25532407;\nlet insurance_app_id = 25540600;\nclass allCarInsurances extends Component {\n\n    state = {\n        carList: []\n    }\n\n   async getAllCars(){\n        let data = [];\n        let check= false;\n        try {\n            let accountInfo = await indexerClient.searchAccounts()\n                .applicationID(insurance_app_id).do();\n            for (let i = 0; i < accountInfo.accounts.length; i++) {\n                let car = accountInfo.accounts[i].address;\n                let insuranceID;\n                for (let j = 0; j < accountInfo.accounts[i]['apps-local-state'].length; j++) {\n                    let temp =accountInfo.accounts[i]['apps-local-state'][j]['key-value'];\n                    if(accountInfo.accounts[i]['apps-local-state'][j].id == insurance_app_id && temp != null && temp.length >= 1){\n                        insuranceID =Buffer(accountInfo.accounts[i]['apps-local-state'][j]['key-value'][0].value.bytes, 'base64').toString('ascii');\n                        check = true;\n                    }                   \n                    if(temp != null && temp.length > 2 && check && accountInfo.accounts[i]['apps-local-state'][j].id == car_app_id){\n                            let make;\n                            let color;\n                            let model;\n                            let owner;\n                            let year;\n                            for (let k = 0; k < temp.length; k++) {                                  \n                                (Buffer(temp[k].key, 'base64').toString('ascii') == \"CarManufacturer\" ? make = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : Buffer(temp[k].key, 'base64').toString('ascii') == \"CarColor\" ? color = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : Buffer(temp[k].key, 'base64').toString('ascii') == \"CarModel\" ? model = Buffer(temp[k].value.bytes, 'base64').toString('ascii') : Buffer(temp[k].key, 'base64').toString('ascii') == \"ProdYear\" ? year = Buffer(temp[k].value.bytes, 'base64').toString('ascii'):Buffer(temp[k].key, 'base64').toString('ascii') == \"Owner\" ? owner = algosdk.encodeAddress(Buffer(temp[k].value.bytes, 'base64')): console.log(\"AllCarsEmptyEntity!!!\"));                             \n                        }    \n                        check =false;       \n                        data.push({Key:car,Record:{owner:owner , make:make, model:model, color:color, insurance: insuranceID,year: year}});\n                    }   \n                }\n            }    \n        } catch (error) {\n            console.log(\"GetAllInsurance ---->\" + error);\n        }\n        this.setState({carList: data});\n    }\n\n    componentDidMount(){    \n        this.getAllCars()\n    }\n\n    render() {\n        console.log(this.state.carList)\n        return (\n            <CardInsurance carInsList={this.state.carList} />\n        );\n    }\n}\n\nexport default allCarInsurances;","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/addCar.js",["100","101","102"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nconst algosdk = require('algosdk');\nconst crypto = require('crypto');\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\nlet account;\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\nconst appIndex = 25532407;\nlet stateless_acc_addr;\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\nfunction hashPassPhrase(passPhrase) {\n    const hash = crypto.createHash('sha256')\n    hash.update(passPhrase)\n    return hash.digest('hex')\n}\n\n// helper function to await transaction confirmation\n// Function used to wait for a tx confirmation\nconst waitForConfirmation = async function (algodclient, txId) {\n    let status = (await algodclient.status().do());\n    let lastRound = status[\"last-round\"];\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n        lastRound++;\n        await algodclient.statusAfterBlock(lastRound).do();\n      }\n    };\n\nasync function getTestNetPrimaryAccount(){\n        window.AlgoSigner.connect()\n        .then((d) => {\n          console.log(\"Connect\")\n        })\n        .catch((e) => {\n          console.error(e);\n        });\n        await window.AlgoSigner.accounts({ledger: 'TestNet'})\n        .then((d) => {\n            if(d && d.length > 0){\n                console.log(`Account found: ${JSON.stringify(d[0])}`);\n                account = d[0];\n            }\n            else{\n                throw('Primary test account not found in AlgoSigner.');\n            }\n        })\n        .catch((e) => {\n            console.log(JSON.stringify(e),'bad');\n        });\n}\n// call application \nasync function callApp(client, index, appArgs,accounts) {\n    // define sender\n   try{\n    if (typeof window.AlgoSigner !== 'undefined') {\n        console.log(\"algosigner installed\");\n      } else {\n        console.log(\"algosigner not installed\");\n      }\n      window.AlgoSigner.connect()\n      .then((d) => {\n        console.log(\"Connect\")\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n    getTestNetPrimaryAccount();\n    // get node suggested parameters\n    let params = await client.getTransactionParams().do();\n    // comment out the next two lines to use suggested fee\n    params.fee = 1000;\n    params.flatFee = true;\n\n    // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n    //let state= await client.accountInformation(account.addr).do()\n    //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n    let txn = algosdk.makeApplicationNoOpTxn(account.address, params, index, appArgs, accounts);\n    let txId = txn.txID().toString();\n    let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n    let signedTxs = await window.AlgoSigner.signTxn([\n     {\n        txn: base64Tx,\n     },\n    ]);\n\n    // Get the base64 encoded signed transaction and convert it to binary\n   let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);    \n    // Sign the transaction\n    console.log(\"Signed transaction with txID: %s\", txId);\n\n    // Submit the transaction\n    await client.sendRawTransaction(signedTxn).do();\n\n    // Wait for confirmation\n    await waitForConfirmation(client, txId);\n\n    // display results\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n    if (transactionResponse['global-state-delta'] !== undefined ) {\n        console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n    }\n    if (transactionResponse['local-state-delta'] !== undefined ) {\n        console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n    }\n    }catch(error){\n        console.log(`Failed: AddCar - ${error}`);\n        return 0;\n    }\n}\n\nasync function payment(to, amount, client){\n    try{\n    window.AlgoSigner.connect()\n      .then((d) => {\n        console.log(\"Connect\")\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n    getTestNetPrimaryAccount();\n    // get node suggested parameters\n    let params = await client.getTransactionParams().do();\n    // comment out the next two lines to use suggested fee\n    params.fee = 1000;\n    params.flatFee = true;\n\n    // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n    //let state= await client.accountInformation(account.addr).do()\n    //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n    const closeToRemaninder = undefined;\n    const note = undefined;\n    let txn = algosdk.makePaymentTxnWithSuggestedParams(account.address, to, amount, closeToRemaninder, note, params);\n    let txId = txn.txID().toString();\n    let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n    let signedTxs = await window.AlgoSigner.signTxn([\n     {\n        txn: base64Tx,\n     },\n    ]);\n\n    // Get the base64 encoded signed transaction and convert it to binary\n   let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);    \n    // Sign the transaction\n    console.log(\"Signed transaction with txID: %s\", txId);\n\n    // Submit the transaction\n    await client.sendRawTransaction(signedTxn).do();\n\n    // Wait for confirmation\n    await waitForConfirmation(client, txId);\n\n    // display results\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n    if (transactionResponse['global-state-delta'] !== undefined ) {\n        console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n    }\n    if (transactionResponse['local-state-delta'] !== undefined ) {\n        console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n    }\n    }catch(error){\n        console.log(`Failed: Payment: - ${error}`);\n        return 0;\n    }\n\n}\nasync function optIn(appIndex){\n    try{\n         // get suggested parameters\n    const params = await algodClient.getTransactionParams().do();\n    // comment out the next two lines to use suggested fee\n    params.fee = 1000;\n    params.flatFee = true;\n\n    let rand =Math.floor(Math.random() * 2**64);\n    const data = \"#pragma version 4\\n\" + \"int \"+rand.toString()+\"\\nint \"+rand.toString()+\"\\n>\\nbz success\\nint 1\\nreturn\\nsuccess:\\nint 1\\nreturn\";\n    console.log(data);\n    const  results = await algodClient.compile(data).do();\n    console.log(\"Hash = \" + results.hash);\n    console.log(\"Result = \" + results.result);\n\n    const program = new Uint8Array(Buffer.from(results.result, \"base64\"));\n    \n    const lsig = algosdk.makeLogicSig(program);\n    console.log(\"lsig : \" + lsig.address());   \n\n    // create a transaction\n    const sender = lsig.address();\n    await payment(sender, 1000000, algodClient);\n    stateless_acc_addr = sender;\n\n    const txn = algosdk.makeApplicationOptInTxn(sender, params, appIndex);\n\n    const rawSignedTxn = algosdk.signLogicSigTransactionObject(txn, lsig);\n\n    // send raw LogicSigTransaction to network\n    const tx = await algodClient.sendRawTransaction(rawSignedTxn.blob).do();\n    console.log(\"Transaction : \" + tx.txId);   \n    await waitForConfirmation(algodClient, tx.txId);\n    return lsig.address();\n    }catch(error){\n        console.log(\"OptIn: \"+error);\n    }\n}\n\n\n    \nexport default function AddCar() {\n    const classes = useStyles();\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [carMake, setCarMake] = React.useState('')\n    const [carModel, setCarModel] = React.useState('')\n    const [carColor, setCarColor] = React.useState('')\n\n    //Handlers\n    const handleProdYear = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleCarModel = (event) => {\n        setCarModel(event.target.value)\n    }\n\n    const handleCarMake = (event) => {\n        setCarMake(event.target.value)\n    }\n\n    const handleCarColor = (event) => {\n        setCarColor(event.target.value)\n    }\n\n    const handleSubmit = async () => {\n        try{\n        let appArgs = [];\n        appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n        appArgs.push(new Uint8Array(Buffer.from(carMake)));\n        appArgs.push(new Uint8Array(Buffer.from(carModel)));\n        appArgs.push(new Uint8Array(Buffer.from(carColor)));\n        appArgs.push(new Uint8Array(Buffer.from(carID)));\n        \n        await optIn();\n        await callApp(algodClient, appIndex, appArgs, [stateless_acc_addr]);\n        }catch(error){\n            console.error(`AddCar- Failed to evaluate transaction: ${error}`);\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Make\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarMake}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Model\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarModel}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Color\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarColor}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Production Year\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleProdYear}\n            />\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n        </div>\n    );\n}","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/components/cardInsurance.js",[],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/components/cards.js",[],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allHTLC.js",["103","104","105","106","107"],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/components/htlcInfo.js",[],{"ruleId":"108","severity":1,"message":"109","line":54,"column":17,"nodeType":"110","messageId":"111","endLine":54,"endColumn":72},{"ruleId":"112","severity":1,"message":"113","line":69,"column":12,"nodeType":"114","messageId":"115","endLine":69,"endColumn":22},{"ruleId":"112","severity":1,"message":"116","line":70,"column":12,"nodeType":"114","messageId":"115","endLine":70,"endColumn":21},{"ruleId":"112","severity":1,"message":"117","line":88,"column":11,"nodeType":"114","messageId":"115","endLine":88,"endColumn":27},{"ruleId":"112","severity":1,"message":"118","line":92,"column":11,"nodeType":"114","messageId":"115","endLine":92,"endColumn":26},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"119","replacedBy":"123"},{"ruleId":"121","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":6,"column":1,"nodeType":"127","endLine":12,"endColumn":3},{"ruleId":"108","severity":1,"message":"109","line":51,"column":17,"nodeType":"110","messageId":"111","endLine":51,"endColumn":72},{"ruleId":"128","severity":1,"message":"129","line":125,"column":44,"nodeType":"130","messageId":"131","endLine":125,"endColumn":45},{"ruleId":"112","severity":1,"message":"132","line":161,"column":12,"nodeType":"114","messageId":"115","endLine":161,"endColumn":17},{"ruleId":"112","severity":1,"message":"133","line":169,"column":11,"nodeType":"114","messageId":"115","endLine":169,"endColumn":22},{"ruleId":"134","severity":1,"message":"135","line":25,"column":74,"nodeType":"130","messageId":"136","endLine":25,"endColumn":76},{"ruleId":"134","severity":1,"message":"135","line":34,"column":82,"nodeType":"130","messageId":"136","endLine":34,"endColumn":84},{"ruleId":"134","severity":1,"message":"135","line":34,"column":218,"nodeType":"130","messageId":"136","endLine":34,"endColumn":220},{"ruleId":"134","severity":1,"message":"135","line":34,"column":348,"nodeType":"130","messageId":"136","endLine":34,"endColumn":350},{"ruleId":"134","severity":1,"message":"135","line":34,"column":478,"nodeType":"130","messageId":"136","endLine":34,"endColumn":480},{"ruleId":"134","severity":1,"message":"135","line":34,"column":605,"nodeType":"130","messageId":"136","endLine":34,"endColumn":607},{"ruleId":"108","severity":1,"message":"109","line":54,"column":17,"nodeType":"110","messageId":"111","endLine":54,"endColumn":72},{"ruleId":"134","severity":1,"message":"135","line":28,"column":74,"nodeType":"130","messageId":"136","endLine":28,"endColumn":76},{"ruleId":"134","severity":1,"message":"135","line":32,"column":118,"nodeType":"130","messageId":"136","endLine":32,"endColumn":120},{"ruleId":"134","severity":1,"message":"135","line":39,"column":82,"nodeType":"130","messageId":"136","endLine":39,"endColumn":84},{"ruleId":"134","severity":1,"message":"135","line":39,"column":218,"nodeType":"130","messageId":"136","endLine":39,"endColumn":220},{"ruleId":"134","severity":1,"message":"135","line":39,"column":348,"nodeType":"130","messageId":"136","endLine":39,"endColumn":350},{"ruleId":"134","severity":1,"message":"135","line":39,"column":478,"nodeType":"130","messageId":"136","endLine":39,"endColumn":480},{"ruleId":"134","severity":1,"message":"135","line":39,"column":605,"nodeType":"130","messageId":"136","endLine":39,"endColumn":607},{"ruleId":"112","severity":1,"message":"137","line":26,"column":10,"nodeType":"114","messageId":"115","endLine":26,"endColumn":24},{"ruleId":"108","severity":1,"message":"109","line":64,"column":17,"nodeType":"110","messageId":"111","endLine":64,"endColumn":72},{"ruleId":"128","severity":1,"message":"129","line":199,"column":40,"nodeType":"130","messageId":"131","endLine":199,"endColumn":41},{"ruleId":"134","severity":1,"message":"135","line":25,"column":74,"nodeType":"130","messageId":"136","endLine":25,"endColumn":76},{"ruleId":"134","severity":1,"message":"135","line":33,"column":82,"nodeType":"130","messageId":"136","endLine":33,"endColumn":84},{"ruleId":"134","severity":1,"message":"135","line":33,"column":182,"nodeType":"130","messageId":"136","endLine":33,"endColumn":184},{"ruleId":"134","severity":1,"message":"135","line":33,"column":279,"nodeType":"130","messageId":"136","endLine":33,"endColumn":281},{"ruleId":"134","severity":1,"message":"135","line":33,"column":416,"nodeType":"130","messageId":"136","endLine":33,"endColumn":418},"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-unused-vars","'firstValid' is assigned a value but never used.","Identifier","unusedVar","'lastValid' is assigned a value but never used.","'handleFirstValid' is assigned a value but never used.","'handleLastValid' is assigned a value but never used.","no-native-reassign",["138"],"no-negated-in-lhs",["139"],["138"],["139"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'carID' is assigned a value but never used.","'handleCarID' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'hashPassPhrase' is defined but never used.","no-global-assign","no-unsafe-negation"]