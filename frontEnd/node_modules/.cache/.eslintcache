[{"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/changeOwner.js":"1","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/index.js":"2","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/App.js":"3","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/reportWebVitals.js":"4","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/AppHeader.js":"5","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/Home.js":"6","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/addCarWithInsurance.js":"7","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allCars.js":"8","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/changeOwner.js":"9","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allCarInsurances.js":"10","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/addCar.js":"11","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/components/cardInsurance.js":"12","/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/components/cards.js":"13"},{"size":11417,"mtime":1631086697032,"results":"14","hashOfConfig":"15"},{"size":627,"mtime":1629917217662,"results":"16","hashOfConfig":"17"},{"size":1323,"mtime":1631089758247,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1629917217664,"results":"19","hashOfConfig":"17"},{"size":776,"mtime":1629917217661,"results":"20","hashOfConfig":"17"},{"size":246,"mtime":1631059865652,"results":"21","hashOfConfig":"17"},{"size":12125,"mtime":1631209048887,"results":"22","hashOfConfig":"17"},{"size":2762,"mtime":1631207058240,"results":"23","hashOfConfig":"17"},{"size":11150,"mtime":1631207213613,"results":"24","hashOfConfig":"17"},{"size":3245,"mtime":1631208959063,"results":"25","hashOfConfig":"17"},{"size":11019,"mtime":1631208876601,"results":"26","hashOfConfig":"17"},{"size":838,"mtime":1631202565437,"results":"27","hashOfConfig":"17"},{"size":739,"mtime":1631202502041,"results":"28","hashOfConfig":"17"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},"11u6c9e",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"221ku1",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/changeOwner.js",["57","58","59","60","61"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField';\nconst algosdk = require('algosdk');\nlet account;\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\nconst appIndex = 25532407;\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\n\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\n// function hashPassPhrase(passPhrase) {\n//     const hash = crypto.createHash('sha256')\n//     hash.update(passPhrase)\n//     return hash.digest('hex')\n// }\n\nconst waitForConfirmation = async function (algodclient, txId) {\n    let status = (await algodclient.status().do());\n    let lastRound = status[\"last-round\"];\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n        lastRound++;\n        await algodclient.statusAfterBlock(lastRound).do();\n      }\n    };\n\n    async function getTestNetPrimaryAccount(){\n        await window.AlgoSigner.accounts({ledger: 'TestNet'})\n        .then((d) => {\n            if(d && d.length > 0){\n                console.log(`Account found: ${JSON.stringify(d[0])}`);\n                account = d[1];\n            }\n            else{\n                throw('Primary test account not found in AlgoSigner.');\n            }\n        })\n        .catch((e) => {\n            console.log(JSON.stringify(e),'bad');\n        });\n    }\nexport default function ChangeCarOwner() {\n    const classes = useStyles();\n\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [carId, setCarId] = React.useState('')\n    const [newOwner, setNewOwner] = React.useState('')\n    const [hash, setHash] = React.useState('')\n    const [firstValid, setFirstValid] = React.useState('')\n    const [lastValid, setLastValid] = React.useState('')\n    const [receiver, setReceiver] = React.useState('')\n    //State Handlers\n    const handleCarID = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleCarId = (event) => {\n        setCarId(event.target.value)\n    }\n\n    const handleNewOwner = (event) => {\n        setNewOwner(event.target.value)\n    }\n\n    const handleReceiver = (event) => {\n        setReceiver(event.target.value)\n    }\n    const handleFirstValid = (event) => {\n        setFirstValid(event.target.value)\n    }\n\n    const handleLastValid = (event) => {\n        setLastValid(event.target.value)\n    }\n    const handleHash = (event) => {\n        setHash(event.target.value)\n    }\n\n    const handleHTLC = async () => {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"setHTLC\")));\n            appArgs.push(new Uint8Array(Buffer.from(hash)));\n            let txn = algosdk.makeApplicationNoOpTxn(account.address, params, appIndex, appArgs,[carID,receiver]);\n            let txId = txn.txID().toString();\n        \n            // Sign the transaction\n            let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n            let signedTxs = await window.AlgoSigner.signTxn([\n             {\n                txn: base64Tx,\n             },\n            ]);\n        \n            // Get the base64 encoded signed transaction and convert it to binary\n           let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); \n            console.log(\"Signed transaction with txID: %s\", txId);\n        \n            // Submit the transaction\n            await algodClient.sendRawTransaction(signedTxn).do();\n        \n            // Wait for confirmation\n            await waitForConfirmation(algodClient, txId);\n        \n            // display results\n            let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n            console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n            if (transactionResponse['global-state-delta'] !== undefined ) {\n                console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n            }\n            if (transactionResponse['local-state-delta'] !== undefined ) {\n                console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n            }\n            }catch(error){\n                console.log(`Failed: AddCar - ${error}`);\n                return 0;\n            }\n    }\n\n    const handleSubmit = async () => {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"changeOwner\")));\n            appArgs.push(new Uint8Array(Buffer.from(newOwner)));\n            let txn = algosdk.makeApplicationNoOpTxn(account.address, params, appIndex, appArgs,[carId]);\n            let txId = txn.txID().toString();\n        \n            // Sign the transaction\n            let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n            let signedTxs = await window.AlgoSigner.signTxn([\n             {\n                txn: base64Tx,\n             },\n            ]);\n        \n            // Get the base64 encoded signed transaction and convert it to binary\n           let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); \n            console.log(\"Signed transaction with txID: %s\", txId);\n        \n            // Submit the transaction\n            await algodClient.sendRawTransaction(signedTxn).do();\n        \n            // Wait for confirmation\n            await waitForConfirmation(algodClient, txId);\n        \n            // display results\n            let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n            console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n            if (transactionResponse['global-state-delta'] !== undefined ) {\n                console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n            }\n            if (transactionResponse['local-state-delta'] !== undefined ) {\n                console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n            }\n            }catch(error){\n                console.log(`Failed: AddCar - ${error}`);\n                return 0;\n            }\n    }\n\n    return (\n        <div>\n            <br></br>\n            <h2>Set HTLC</h2>\n            <br></br>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarID}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Hash\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleHash}\n            />\n            {/*<TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"First Valid Round\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleFirstValid}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Last Valid Round\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleLastValid}\n            />*/}\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Receiver\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleReceiver}\n            />\n            <Button onClick={handleHTLC}>\n                Submit\n            </Button>\n            <br></br>\n            <h2>Unlock HTLC</h2>\n            <br></br>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarId}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Secret Key\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleNewOwner}\n            />\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n            <br></br>\n        </div>\n    );\n}\n",["62","63"],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/index.js",[],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/App.js",[],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/reportWebVitals.js",[],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/AppHeader.js",[],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/Home.js",["64"],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/addCarWithInsurance.js",["65","66","67","68"],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allCars.js",["69","70","71","72","73","74"],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/changeOwner.js",["75"],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/allCarInsurances.js",["76","77","78","79","80","81","82"],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/pages/addCar.js",["83","84","85"],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/components/cardInsurance.js",[],"/Users/egecaner/IDELTA/IDeltaTests/Algorand/POC/frontEnd/src/components/cards.js",[],{"ruleId":"86","severity":1,"message":"87","line":54,"column":17,"nodeType":"88","messageId":"89","endLine":54,"endColumn":72},{"ruleId":"90","severity":1,"message":"91","line":69,"column":12,"nodeType":"92","messageId":"93","endLine":69,"endColumn":22},{"ruleId":"90","severity":1,"message":"94","line":70,"column":12,"nodeType":"92","messageId":"93","endLine":70,"endColumn":21},{"ruleId":"90","severity":1,"message":"95","line":88,"column":11,"nodeType":"92","messageId":"93","endLine":88,"endColumn":27},{"ruleId":"90","severity":1,"message":"96","line":92,"column":11,"nodeType":"92","messageId":"93","endLine":92,"endColumn":26},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":6,"column":1,"nodeType":"103","endLine":12,"endColumn":3},{"ruleId":"86","severity":1,"message":"87","line":51,"column":17,"nodeType":"88","messageId":"89","endLine":51,"endColumn":72},{"ruleId":"104","severity":1,"message":"105","line":125,"column":44,"nodeType":"106","messageId":"107","endLine":125,"endColumn":45},{"ruleId":"90","severity":1,"message":"108","line":161,"column":12,"nodeType":"92","messageId":"93","endLine":161,"endColumn":17},{"ruleId":"90","severity":1,"message":"109","line":169,"column":11,"nodeType":"92","messageId":"93","endLine":169,"endColumn":22},{"ruleId":"110","severity":1,"message":"111","line":25,"column":74,"nodeType":"106","messageId":"112","endLine":25,"endColumn":76},{"ruleId":"110","severity":1,"message":"111","line":34,"column":82,"nodeType":"106","messageId":"112","endLine":34,"endColumn":84},{"ruleId":"110","severity":1,"message":"111","line":34,"column":218,"nodeType":"106","messageId":"112","endLine":34,"endColumn":220},{"ruleId":"110","severity":1,"message":"111","line":34,"column":348,"nodeType":"106","messageId":"112","endLine":34,"endColumn":350},{"ruleId":"110","severity":1,"message":"111","line":34,"column":478,"nodeType":"106","messageId":"112","endLine":34,"endColumn":480},{"ruleId":"110","severity":1,"message":"111","line":34,"column":605,"nodeType":"106","messageId":"112","endLine":34,"endColumn":607},{"ruleId":"86","severity":1,"message":"87","line":54,"column":17,"nodeType":"88","messageId":"89","endLine":54,"endColumn":72},{"ruleId":"110","severity":1,"message":"111","line":28,"column":74,"nodeType":"106","messageId":"112","endLine":28,"endColumn":76},{"ruleId":"110","severity":1,"message":"111","line":32,"column":118,"nodeType":"106","messageId":"112","endLine":32,"endColumn":120},{"ruleId":"110","severity":1,"message":"111","line":39,"column":82,"nodeType":"106","messageId":"112","endLine":39,"endColumn":84},{"ruleId":"110","severity":1,"message":"111","line":39,"column":218,"nodeType":"106","messageId":"112","endLine":39,"endColumn":220},{"ruleId":"110","severity":1,"message":"111","line":39,"column":348,"nodeType":"106","messageId":"112","endLine":39,"endColumn":350},{"ruleId":"110","severity":1,"message":"111","line":39,"column":478,"nodeType":"106","messageId":"112","endLine":39,"endColumn":480},{"ruleId":"110","severity":1,"message":"111","line":39,"column":605,"nodeType":"106","messageId":"112","endLine":39,"endColumn":607},{"ruleId":"90","severity":1,"message":"113","line":26,"column":10,"nodeType":"92","messageId":"93","endLine":26,"endColumn":24},{"ruleId":"86","severity":1,"message":"87","line":64,"column":17,"nodeType":"88","messageId":"89","endLine":64,"endColumn":72},{"ruleId":"104","severity":1,"message":"105","line":199,"column":40,"nodeType":"106","messageId":"107","endLine":199,"endColumn":41},"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-unused-vars","'firstValid' is assigned a value but never used.","Identifier","unusedVar","'lastValid' is assigned a value but never used.","'handleFirstValid' is assigned a value but never used.","'handleLastValid' is assigned a value but never used.","no-native-reassign",["114"],"no-negated-in-lhs",["115"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'carID' is assigned a value but never used.","'handleCarID' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'hashPassPhrase' is defined but never used.","no-global-assign","no-unsafe-negation"]