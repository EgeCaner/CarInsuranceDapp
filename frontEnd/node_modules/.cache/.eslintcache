[{"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/index.js":"1","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/reportWebVitals.js":"2","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/App.js":"3","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/AppHeader.js":"4","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/allCars.js":"5","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/Home.js":"6","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCar.js":"7","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCarWithInsurance.js":"8","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/changeOwner.js":"9","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/allCarInsurances.js":"10","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/components/cards.js":"11","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/components/cardInsurance.js":"12"},{"size":627,"mtime":1629917217662,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1629917217664,"results":"15","hashOfConfig":"14"},{"size":1323,"mtime":1631089758247,"results":"16","hashOfConfig":"14"},{"size":776,"mtime":1629917217661,"results":"17","hashOfConfig":"14"},{"size":2359,"mtime":1631093514151,"results":"18","hashOfConfig":"14"},{"size":246,"mtime":1631059865652,"results":"19","hashOfConfig":"14"},{"size":11001,"mtime":1631095293799,"results":"20","hashOfConfig":"14"},{"size":12074,"mtime":1631086978524,"results":"21","hashOfConfig":"14"},{"size":11417,"mtime":1631086697032,"results":"22","hashOfConfig":"14"},{"size":2861,"mtime":1631097821944,"results":"23","hashOfConfig":"14"},{"size":669,"mtime":1631097002271,"results":"24","hashOfConfig":"14"},{"size":800,"mtime":1631097138867,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"11u6c9e",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/index.js",[],["54","55"],"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/reportWebVitals.js",[],"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/App.js",[],"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/AppHeader.js",[],"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/allCars.js",["56"],"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/Home.js",["57"],"import React from 'react';\nimport {\n  Typography,\n} from '@material-ui/core';\n\nexport default () => (\n  <div>\n    <Typography variant=\"h6\">Algorand Sample application</Typography>\n    <p variant=\"h6\">This simple car & insurance</p>\n  </div>\n  \n);","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCar.js",["58","59","60"],"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/addCarWithInsurance.js",["61","62","63","64"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from '@material-ui/core';\nconst algosdk = require('algosdk');\nlet account;\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\nlet stateless_acc_addr;\n\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\n\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\nconst waitForConfirmation = async function (algodclient, txId) {\n    let status = (await algodclient.status().do());\n    let lastRound = status[\"last-round\"];\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n        lastRound++;\n        await algodclient.statusAfterBlock(lastRound).do();\n      }\n    };\n\n    async function getTestNetPrimaryAccount(){\n        await window.AlgoSigner.accounts({ledger: 'TestNet'})\n        .then((d) => {\n            if(d && d.length > 0){\n                console.log(`Account found: ${JSON.stringify(d[0])}`);\n                account = d[0];\n            }\n            else{\n                throw('Primary test account not found in AlgoSigner.');\n            }\n        })\n        .catch((e) => {\n            console.log(JSON.stringify(e),'bad');\n        });\n    }\n\n    async function payment(to, amount, client){\n        try{\n        window.AlgoSigner.connect()\n          .then((d) => {\n            console.log(\"Connect\")\n          })\n          .catch((e) => {\n            console.error(e);\n          });\n        getTestNetPrimaryAccount();\n        // get node suggested parameters\n        let params = await client.getTransactionParams().do();\n        // comment out the next two lines to use suggested fee\n        params.fee = 1000;\n        params.flatFee = true;\n    \n        // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n        //let state= await client.accountInformation(account.addr).do()\n        //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n        const closeToRemaninder = undefined;\n        const note = undefined;\n        let txn = algosdk.makePaymentTxnWithSuggestedParams(account.address, to, amount, closeToRemaninder, note, params);\n        let txId = txn.txID().toString();\n        let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n    \n        let signedTxs = await window.AlgoSigner.signTxn([\n         {\n            txn: base64Tx,\n         },\n        ]);\n    \n        // Get the base64 encoded signed transaction and convert it to binary\n       let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);    \n        // Sign the transaction\n        console.log(\"Signed transaction with txID: %s\", txId);\n    \n        // Submit the transaction\n        await client.sendRawTransaction(signedTxn).do();\n    \n        // Wait for confirmation\n        await waitForConfirmation(client, txId);\n    \n        // display results\n        let transactionResponse = await client.pendingTransactionInformation(txId).do();\n        console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n        if (transactionResponse['global-state-delta'] !== undefined ) {\n            console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n        }\n        if (transactionResponse['local-state-delta'] !== undefined ) {\n            console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n        }\n        }catch(error){\n            console.log(`Failed: Payment: - ${error}`);\n            return 0;\n        }\n    \n    }\n    async function optIn(){\n        try{\n             // get suggested parameters\n        const params = await algodClient.getTransactionParams().do();\n        // comment out the next two lines to use suggested fee\n        params.fee = 1000;\n        params.flatFee = true;\n    \n        let rand =Math.floor(Math.random() * 2**64);\n        const data = \"#pragma version 4\\n\" + \"int \"+rand.toString()+\"\\nint \"+rand.toString()+\"\\n>\\nbz success\\nint 1\\nreturn\\nsuccess:\\nint 1\\nreturn\";\n        const  results = await algodClient.compile(data).do();\n        console.log(\"Hash = \" + results.hash);\n        console.log(\"Result = \" + results.result);\n    \n        const program = new Uint8Array(Buffer.from(results.result, \"base64\"));\n        \n        const lsig = algosdk.makeLogicSig(program);\n        console.log(\"lsig : \" + lsig.address());   \n    \n        // create a transaction\n        const sender = lsig.address();\n        await payment(sender, 3000000, algodClient);\n        stateless_acc_addr = sender;\n    \n        const txn_1 = algosdk.makeApplicationOptInTxn(sender, params, 25540600);\n        const txn_2 = algosdk.makeApplicationOptInTxn(sender, params, 25532407);\n        let txns = [txn_1, txn_2];\n        let txgroup = algosdk.assignGroupID(txns);\n        const rawSignedTxn_1 = algosdk.signLogicSigTransactionObject(txgroup[0], lsig);\n        const rawSignedTxn_2 = algosdk.signLogicSigTransactionObject(txgroup[1], lsig);\n        let signed =[rawSignedTxn_1.blob, rawSignedTxn_2.blob];\n        // send raw LogicSigTransaction to network\n        const tx = await algodClient.sendRawTransaction(signed).do();\n        console.log(\"Transaction : \" + tx.txId);   \n        await waitForConfirmation(algodClient, tx.txId);\n        return lsig.address();\n        }catch(error){\n            console.log(\"OptIn: \"+error);\n        }\n    }\n\nexport default function AddCar() {\n    const classes = useStyles();\n\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [carMake, setCarMake] = React.useState('')\n    const [carModel, setCarModel] = React.useState('')\n    const [carColor, setCarColor] = React.useState('')\n    const [carOwner, setCarOwner] = React.useState('')\n    const [carInsurance, setCarInsurance] = React.useState('')\n\n    //Handlers\n    const handleCarID = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleCarModel = (event) => {\n        setCarModel(event.target.value)\n    }\n\n    const handleCarMake = (event) => {\n        setCarMake(event.target.value)\n    }\n\n    const handleCarColor = (event) => {\n        setCarColor(event.target.value)\n    }\n\n    const handleCarOwner = (event) => {\n        setCarOwner(event.target.value)\n    }\n\n    const handleCarInsurance = (event) => {\n        setCarInsurance(event.target.value)\n    }\n\n   const handleSubmit = async function () {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            await optIn();\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArg = [];\n            appArg.push(new Uint8Array(Buffer.from(\"createInsurance\")));\n            appArg.push(new Uint8Array(Buffer.from(carInsurance)));\n            let appArr = [25532407]\n            // create unsigned transaction   [str:addCar, str:Skoda, str: ]\n            //let state= await client.accountInformation(account.addr).do()\n            //let txn = algosdk.makeApplicationOptInTxn(sender, params, index);\n            let txn_1 = algosdk.makeApplicationNoOpTxn(account.address, params, 25540600, appArg,[stateless_acc_addr],appArr);\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"addCar\")));\n            appArgs.push(new Uint8Array(Buffer.from(carMake)));\n            appArgs.push(new Uint8Array(Buffer.from(carModel)));\n            appArgs.push(new Uint8Array(Buffer.from(carColor)));\n            appArgs.push(new Uint8Array(Buffer.from(carOwner)));\n            let txn_2 = algosdk.makeApplicationNoOpTxn(account.address, params, 25532407, appArgs, [stateless_acc_addr]);\n            let txns = []\n            txns.push(txn_2);\n            txns.push(txn_1);\n            let txgroup = algosdk.assignGroupID(txns);\n            let signed =[]\n            let base64Tx_O = window.AlgoSigner.encoding.msgpackToBase64(txgroup[0].toByte());\n            let base64Tx_1 = window.AlgoSigner.encoding.msgpackToBase64(txgroup[1].toByte());\n            let signedTxs_0 = await window.AlgoSigner.signTxn([\n                {\n                   txn: base64Tx_O,\n                }]);\n            let signedTxs_1 = await window.AlgoSigner.signTxn([\n                {\n                   txn: base64Tx_1,\n                }]);\n            signed.push(window.AlgoSigner.encoding.base64ToMsgpack(signedTxs_0[0].blob)); \n            signed.push(window.AlgoSigner.encoding.base64ToMsgpack(signedTxs_1[0].blob));  \n            let tx = (await algodClient.sendRawTransaction(signed).do());\n            console.log(\"Transaction : \" + tx.txId);\n            await waitForConfirmation(algodClient, tx.txId)\n        }catch(error){\n            console.log(`Failed: AddCar - ${error}`);\n            return 0;\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Make\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarMake}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Model\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarModel}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Color\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarColor}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Production Year\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarOwner}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Car Insurance\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarInsurance}\n            />\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n        </div>\n    );\n}\n","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/changeOwner.js",["65","66","67","68","69"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField';\nconst algosdk = require('algosdk');\nlet account;\nconst algodAddress = \"https://testnet.algoexplorerapi.io/\";\nconst algodToken = \"\";\nconst algodPort =\"\";\nconst appIndex = 25532407;\nlet algodClient = new algosdk.Algodv2(algodToken, algodAddress, algodPort);\n\nvar check =algodClient.healthCheck().do();\nif (check){\n    console.log(\"client connected\")\n}\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\n// function hashPassPhrase(passPhrase) {\n//     const hash = crypto.createHash('sha256')\n//     hash.update(passPhrase)\n//     return hash.digest('hex')\n// }\n\nconst waitForConfirmation = async function (algodclient, txId) {\n    let status = (await algodclient.status().do());\n    let lastRound = status[\"last-round\"];\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n        lastRound++;\n        await algodclient.statusAfterBlock(lastRound).do();\n      }\n    };\n\n    async function getTestNetPrimaryAccount(){\n        await window.AlgoSigner.accounts({ledger: 'TestNet'})\n        .then((d) => {\n            if(d && d.length > 0){\n                console.log(`Account found: ${JSON.stringify(d[0])}`);\n                account = d[1];\n            }\n            else{\n                throw('Primary test account not found in AlgoSigner.');\n            }\n        })\n        .catch((e) => {\n            console.log(JSON.stringify(e),'bad');\n        });\n    }\nexport default function ChangeCarOwner() {\n    const classes = useStyles();\n\n    //States\n    const [carID, setCarID] = React.useState('')\n    const [carId, setCarId] = React.useState('')\n    const [newOwner, setNewOwner] = React.useState('')\n    const [hash, setHash] = React.useState('')\n    const [firstValid, setFirstValid] = React.useState('')\n    const [lastValid, setLastValid] = React.useState('')\n    const [receiver, setReceiver] = React.useState('')\n    //State Handlers\n    const handleCarID = (event) => {\n        setCarID(event.target.value)\n    }\n\n    const handleCarId = (event) => {\n        setCarId(event.target.value)\n    }\n\n    const handleNewOwner = (event) => {\n        setNewOwner(event.target.value)\n    }\n\n    const handleReceiver = (event) => {\n        setReceiver(event.target.value)\n    }\n    const handleFirstValid = (event) => {\n        setFirstValid(event.target.value)\n    }\n\n    const handleLastValid = (event) => {\n        setLastValid(event.target.value)\n    }\n    const handleHash = (event) => {\n        setHash(event.target.value)\n    }\n\n    const handleHTLC = async () => {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"setHTLC\")));\n            appArgs.push(new Uint8Array(Buffer.from(hash)));\n            let txn = algosdk.makeApplicationNoOpTxn(account.address, params, appIndex, appArgs,[carID,receiver]);\n            let txId = txn.txID().toString();\n        \n            // Sign the transaction\n            let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n            let signedTxs = await window.AlgoSigner.signTxn([\n             {\n                txn: base64Tx,\n             },\n            ]);\n        \n            // Get the base64 encoded signed transaction and convert it to binary\n           let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); \n            console.log(\"Signed transaction with txID: %s\", txId);\n        \n            // Submit the transaction\n            await algodClient.sendRawTransaction(signedTxn).do();\n        \n            // Wait for confirmation\n            await waitForConfirmation(algodClient, txId);\n        \n            // display results\n            let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n            console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n            if (transactionResponse['global-state-delta'] !== undefined ) {\n                console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n            }\n            if (transactionResponse['local-state-delta'] !== undefined ) {\n                console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n            }\n            }catch(error){\n                console.log(`Failed: AddCar - ${error}`);\n                return 0;\n            }\n    }\n\n    const handleSubmit = async () => {\n        try{\n            if (typeof window.AlgoSigner !== 'undefined') {\n                console.log(\"algosigner installed\");\n              } else {\n                console.log(\"algosigner not installed\");\n              }\n              window.AlgoSigner.connect()\n              .then((d) => {\n                console.log(\"Connect\")\n              })\n              .catch((e) => {\n                console.error(e);\n              });\n            getTestNetPrimaryAccount();\n            // get node suggested parameters\n            let params = await algodClient.getTransactionParams().do();\n            // comment out the next two lines to use suggested fee\n            params.fee = 1000;\n            params.flatFee = true;\n            let appArgs = [];\n            appArgs.push(new Uint8Array(Buffer.from(\"changeOwner\")));\n            appArgs.push(new Uint8Array(Buffer.from(newOwner)));\n            let txn = algosdk.makeApplicationNoOpTxn(account.address, params, appIndex, appArgs,[carId]);\n            let txId = txn.txID().toString();\n        \n            // Sign the transaction\n            let base64Tx = window.AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n            let signedTxs = await window.AlgoSigner.signTxn([\n             {\n                txn: base64Tx,\n             },\n            ]);\n        \n            // Get the base64 encoded signed transaction and convert it to binary\n           let signedTxn = window.AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob); \n            console.log(\"Signed transaction with txID: %s\", txId);\n        \n            // Submit the transaction\n            await algodClient.sendRawTransaction(signedTxn).do();\n        \n            // Wait for confirmation\n            await waitForConfirmation(algodClient, txId);\n        \n            // display results\n            let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n            console.log(\"Called app-id:\",transactionResponse['txn']['txn']['apid'])\n            if (transactionResponse['global-state-delta'] !== undefined ) {\n                console.log(\"Global State updated:\",transactionResponse['global-state-delta']);\n            }\n            if (transactionResponse['local-state-delta'] !== undefined ) {\n                console.log(\"Local State updated:\",transactionResponse['local-state-delta']);\n            }\n            }catch(error){\n                console.log(`Failed: AddCar - ${error}`);\n                return 0;\n            }\n    }\n\n    return (\n        <div>\n            <br></br>\n            <h2>Set HTLC</h2>\n            <br></br>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarID}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Hash\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleHash}\n            />\n            {/*<TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"First Valid Round\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleFirstValid}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Last Valid Round\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleLastValid}\n            />*/}\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Receiver\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleReceiver}\n            />\n            <Button onClick={handleHTLC}>\n                Submit\n            </Button>\n            <br></br>\n            <h2>Unlock HTLC</h2>\n            <br></br>\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"CarID\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleCarId}\n            />\n            <TextField\n                className={classes.margin}\n                id=\"input-with-icon-textfield\"\n                label=\"Secret Key\"\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                    ),\n                }}\n                onInput={handleNewOwner}\n            />\n            <Button onClick={handleSubmit}>\n                Submit\n            </Button>\n            <br></br>\n        </div>\n    );\n}\n","/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/pages/allCarInsurances.js",["70","71"],"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/components/cards.js",[],"/Users/egecaner/IDELTA/HyperLedgerPOC/POC/frontEnd/src/components/cardInsurance.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":26,"column":74,"nodeType":"78","messageId":"79","endLine":26,"endColumn":76},{"ruleId":"80","severity":1,"message":"81","line":6,"column":1,"nodeType":"82","endLine":12,"endColumn":3},{"ruleId":"83","severity":1,"message":"84","line":26,"column":10,"nodeType":"85","messageId":"86","endLine":26,"endColumn":24},{"ruleId":"87","severity":1,"message":"88","line":64,"column":17,"nodeType":"89","messageId":"90","endLine":64,"endColumn":72},{"ruleId":"91","severity":1,"message":"92","line":199,"column":40,"nodeType":"78","messageId":"93","endLine":199,"endColumn":41},{"ruleId":"87","severity":1,"message":"88","line":49,"column":17,"nodeType":"89","messageId":"90","endLine":49,"endColumn":72},{"ruleId":"91","severity":1,"message":"92","line":123,"column":44,"nodeType":"78","messageId":"93","endLine":123,"endColumn":45},{"ruleId":"83","severity":1,"message":"94","line":159,"column":12,"nodeType":"85","messageId":"86","endLine":159,"endColumn":17},{"ruleId":"83","severity":1,"message":"95","line":167,"column":11,"nodeType":"85","messageId":"86","endLine":167,"endColumn":22},{"ruleId":"87","severity":1,"message":"88","line":54,"column":17,"nodeType":"89","messageId":"90","endLine":54,"endColumn":72},{"ruleId":"83","severity":1,"message":"96","line":69,"column":12,"nodeType":"85","messageId":"86","endLine":69,"endColumn":22},{"ruleId":"83","severity":1,"message":"97","line":70,"column":12,"nodeType":"85","messageId":"86","endLine":70,"endColumn":21},{"ruleId":"83","severity":1,"message":"98","line":88,"column":11,"nodeType":"85","messageId":"86","endLine":88,"endColumn":27},{"ruleId":"83","severity":1,"message":"99","line":92,"column":11,"nodeType":"85","messageId":"86","endLine":92,"endColumn":26},{"ruleId":"76","severity":1,"message":"77","line":27,"column":74,"nodeType":"78","messageId":"79","endLine":27,"endColumn":76},{"ruleId":"76","severity":1,"message":"77","line":31,"column":74,"nodeType":"78","messageId":"79","endLine":31,"endColumn":76},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'hashPassPhrase' is defined but never used.","Identifier","unusedVar","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'carID' is assigned a value but never used.","'handleCarID' is assigned a value but never used.","'firstValid' is assigned a value but never used.","'lastValid' is assigned a value but never used.","'handleFirstValid' is assigned a value but never used.","'handleLastValid' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]